@page "/gantt-chart/multi-taskbar"

@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This example provides a comprehensive explanation of the process for visualizing a list of tasks assigned to a resource within a collapsed parent row. Additionally, it outlines the capability to modify task scheduling while in the collapsed state. This functionality can be enabled by setting the <a aria-label="Navigate to the EnableMultiTaskbar property reference for gantt taskbar settings" target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttTaskbarSettings.html#Syncfusion_Blazor_Gantt_GanttTaskbarSettings_EnableMultiTaskbar'>EnableMultiTaskbar</a> property of <a aria-label="Navigate to the class reference for gantt taskbar settings" target="_blank" href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttTaskbarSettings.html'>GanttTaskbarSettings</a> to <code>true</code>.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, demonstration showcases the ability to facilitate vertical drag and drop of taskbars between different resources by  <a aria-label="Navigate to the AllowTaskbarDragAndDrop property reference for gantt taskbar settings" target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttTaskbarSettings.html#Syncfusion_Blazor_Gantt_GanttTaskbarSettings_AllowTaskbarDragAndDrop'>AllowTaskbarDragAndDrop</a> property of <code>GanttTaskbarSettings</code> to <code>true</code>.</p>

    <p>In this demo, the resource assignment collection includes both resource IDs and task IDs to facilitate the mapping of resources to tasks and the resource information can be shown by using the <a aria-label="Navigate to the task label property reference for gantt label settings" target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttLabelSettings-1.html#Syncfusion_Blazor_Gantt_GanttLabelSettings_1_TaskLabel'>TaskLabel</a> property of <a aria-label="Navigate to the class reference for gantt label settings" target="_blank" href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttLabelSettings-1.html'>GanttLabelSettings</a>. Using the toolbar action, you can perform the CRUD operation for the resource allocation based on their availability and task complexity.</p>

    <p>Resources can be mapped using <a aria-label="Navigate to the class reference for gantt resource fields" target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttResource-1.html'>GanttResource:</a> component with following properties</p>
    <ul>
        <li><code>Id</code> - To map resource ID</li>
        <li> <code>Name</code> - To map resource name</li>
        <li><code>MaxUnits</code> - To map resource unit</li>
        <li><code>DataSource</code> - To map resource datasource</li>
    </ul>
    <p>Resource assignment can be mapped using <a aria-label="Navigate to the class reference for gantt assignment fields" target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttAssignmentFields-1.html'>GanttAssignmentFields:</a> component with following properties</p>
    <ul>
        <li><code>PrimaryKey</code> - To map primary key</li>
        <li><code>TaskID</code> - To map task ID</li>
        <li><code>ResourceID</code> - To map resource ID</li>
        <li><code>DataSource</code> - To map resource assignment datasource</li>
    </ul>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <div class="e-switch-control">
                <label class="showhide"> Allow Taskbar Drag And Drop </label>
                <SfSwitch ValueChange="TaskbarDragAndDrop" @bind-Checked="@Check" TChecked="bool"></SfSwitch>
            </div>
            <SfGantt @ref="Gantt" ShowOverallocation="true" TreeColumnIndex="1" RowHeight="38"  DataSource="@TaskCollection" Height="450px" Width="100%" ViewType="ViewType.ResourceView" CollapseAllParentTasks=true
                     Toolbar="@(new List<Object>() { "Add", "Cancel", "Update" , "Delete", "Edit", "CollapseAll", "ExpandAll" })" AllowResizing="true">
                <GanttTaskFields Id="Id" Name="Name" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                                 ParentID="ParentId" Work="Work" Dependency="Predecessor" >
                </GanttTaskFields>
                <GanttResource DataSource="ResourceCollection" Id="Id" Name="Name" MaxUnits="MaxUnit" Group="Group" TValue="TaskInfoModel" TResources="ResourceInfoModel"></GanttResource>
                <GanttAssignmentFields DataSource="AssignmentCollection" PrimaryKey="Id" TaskID="TaskId" ResourceID="ResourceId" Units="Unit" TValue="TaskInfoModel" TAssignment="AssignmentModel"></GanttAssignmentFields>
                <GanttLabelSettings TaskLabel="Name" TValue="TaskInfoModel"></GanttLabelSettings>
                <GanttEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" AllowTaskbarEditing="true"></GanttEditSettings>
                <GanttTaskbarSettings EnableMultiTaskbar="true" AllowTaskbarDragAndDrop="@taskbarUpdate"></GanttTaskbarSettings>
                <GanttColumns>
                    <GanttColumn Field="Id" Visible=false></GanttColumn>
                    <GanttColumn Field="Name" HeaderText="Name" Width="250"></GanttColumn>
                    <GanttColumn Field="Work" HeaderText="Work (Hours)"></GanttColumn>
                    <GanttColumn Field="Progress"></GanttColumn>
                    <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
                    <GanttColumn Field="EndDate" HeaderText="End Date"></GanttColumn>
                </GanttColumns>
                <GanttSplitterSettings  Position="30%"></GanttSplitterSettings>
            </SfGantt>
       
        </div>
    </div>
</div>

<style>
    .showhide {
        font-size: 15px;
        font-weight: 400;
        margin-bottom: 1px;
        padding: 10px;
    }

    .e-switch-control {
        display: flex;
        align-items: center;
    }

</style>
@code {
    public SfGantt<TaskInfoModel> Gantt;
    private DateTime ProjectStart = new DateTime(2022, 03, 25);
    private DateTime ProjectEnd = new DateTime(2022, 05, 10);
    private List<TaskInfoModel> TaskCollection { get; set; }
    private List<ResourceInfoModel> ResourceCollection { get; set; }
    private Boolean Check = true;
    private bool taskbarUpdate = true;
    private static List<AssignmentModel> AssignmentCollection { get; set; }
    public void TaskbarDragAndDrop()
    {
        taskbarUpdate = !taskbarUpdate;
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        TaskCollection = GetTaskCollection();
        ResourceCollection = GetResources;
        AssignmentCollection = GetAssignmentCollection();
    }
    public class ResourceInfoModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public double MaxUnit { get; set; }
        public string? Group { get; set; }
    }
    public class AssignmentModel
    {
        public int Id { get; set; }
        public int TaskId { get; set; }
        public int ResourceId { get; set; }
        public double Unit { get; set; }
    }
    public static List<ResourceInfoModel> GetResources = new List<ResourceInfoModel>()
    {
        new ResourceInfoModel() { Id= 1, Name= "Martin Tamer", Group="Planning Team", },
        new ResourceInfoModel() { Id= 2, Name= "Rose Fuller", Group="Testing Team" },
        new ResourceInfoModel() { Id= 3, Name= "Margaret Buchanan", Group="Approval Team", },
        new ResourceInfoModel() { Id= 4, Name= "Fuller King", Group="Development Team",  },
        new ResourceInfoModel() { Id= 5, Name= "Davolio Fuller", Group="Approval Team", },
        new ResourceInfoModel() { Id= 6, Name= "Fuller Buchanan", Group="Development Team" },
        new ResourceInfoModel() { Id= 7, Name= "Jack Davolio", Group="Planning Team" },
        new ResourceInfoModel() { Id= 8, Name= "Tamer Vinet", Group="Testing Team" },
        new ResourceInfoModel() { Id= 9, Name= "Vinet Fuller", Group="Development Team" },
        new ResourceInfoModel() { Id= 10, Name= "Bergs Anton", Group="Testing Team" },
    };
    public class TaskInfoModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public int? ParentId { get; set; }
        public string Predecessor { get; set; }
        public string Notes { get; set; }
        public double? Work { get; set; }
        public string TaskType { get; set; }
    }
    public static List<TaskInfoModel> GetTaskCollection()
    {
        List<TaskInfoModel> Tasks = new List<TaskInfoModel>() {
                new TaskInfoModel() { 
                    Id = 1, 
                    Name = "Project initiation", 
                    StartDate = new DateTime(2019, 03, 29), 
                    EndDate = new DateTime(2019, 04, 21), 
                    TaskType ="FixedDuration", 
                    Work=128, 
                    Duration="4",
                },
                new TaskInfoModel() { 
                    Id = 2, 
                    Name = "Identify Site location", 
                    StartDate = new DateTime(2019, 03, 29), 
                    Progress = 30, 
                    ParentId = 1, 
                    Duration="3", 
                },
                new TaskInfoModel() { 
                    Id = 3, 
                    Name = "Perform soil test",
                    StartDate = new DateTime(2019, 04, 03),  
                    Progress = 50, 
                    ParentId = 1, 
                    Duration="5", 
                    Work=16, 
                    Predecessor="2",
                },
                new TaskInfoModel() { 
                    Id = 4, 
                    Name = "Soil test approval",
                    StartDate = new DateTime(2019, 04, 09), 
                    ParentId = 1, 
                    Work=96, 
                    Duration="3", 
                    TaskType="FixedWork", 
                    Predecessor="3", 
                    Progress=40, 
                },
                new TaskInfoModel() { 
                    Id = 5, 
                    Name = "Project estimation",
                    StartDate = new DateTime(2019, 03, 29),
                    EndDate = new DateTime(2019,04,21), 
                    Progress = 30,  
                    Work=16, 
                    TaskType="FixedWork",
                },
                new TaskInfoModel() {
                    Id = 6,
                    Name = "Develop floor plan for estimation",
                    StartDate = new DateTime(2019, 04, 01),
                    TaskType="FixedDuration",
                    Duration="5",
                    Progress=40,
                    Work=50,
                },
                new TaskInfoModel() {
                    Id = 7,
                    Name = "List materials",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "4", 
                    Progress = 30, 
                    ParentId = 5, 
                    Work=30, 
                    TaskType="FixedDuration",  
                    Predecessor= "6FS-2",
                },
                new TaskInfoModel() {
                    Id = 8, 
                    Name = "Estimation approval",
                    StartDate = new DateTime(2019, 04, 09), 
                    Duration = "4", 
                    Progress = 30, 
                    ParentId = 5, 
                    TaskType="FixedWork", 
                    Work=48, 
                    Predecessor = "7FS-1",
                },
                new TaskInfoModel() { 
                    Id = 9, 
                    Name = "Site work",
                    Progress=30, 
                    StartDate = new DateTime(2019, 04, 04), 
                    EndDate = new DateTime(2019,04,21),
                    Work=60, 
                    TaskType="FixedUnit", 
                },
                new TaskInfoModel() {
                    Id = 10, 
                    Name = "Install temporary power service",
                    StartDate = new DateTime(2019, 04, 01), 
                    Duration = "14", 
                    ParentId = 9, 
                    Work=60, 
                    Progress=50, 
                    TaskType="FixedWork",
                },
                new TaskInfoModel() { 
                    Id = 11, 
                    Name = "Clear the building site",
                    StartDate = new DateTime(2019, 04, 08), 
                    Duration = "9", 
                    ParentId = 9, 
                    Work=60,
                    Progress=40, 
                    TaskType="FixedDuration", 
                    Predecessor = "10FS-9",
                },
                new TaskInfoModel() { 
                    Id = 12, 
                    Name = "Sign contract",
                    StartDate = new DateTime(2019, 04, 12), 
                    Duration = "5", 
                    ParentId = 9, 
                    Work=60,Progress=40, 
                    TaskType="FixedDuration",
                    Predecessor = "11FS-5",
                },
                new TaskInfoModel() { 
                    Id = 13, 
                    Name = "Foundation",
                    StartDate = new DateTime(2022, 04, 04),
                    EndDate = new DateTime(2019,04,28),
                    Work=60,
                    Progress=40, 
                    TaskType="FixedDuration",
                },
                new TaskInfoModel() { 
                    Id = 14, 
                    Name = "Excavate for foundations", 
                    StartDate = new DateTime(2019, 04, 01), 
                    Duration = "2", 
                    ParentId = 13, 
                    Work=60,
                    Progress=40, 
                    TaskType="FixedDuration", 
                },
                new TaskInfoModel() { 
                    Id = 15, 
                    Name = "Dig footer",
                    StartDate = new DateTime(2019, 04, 04), 
                    Duration = "2", 
                    ParentId = 13, 
                    Work=60,
                    Progress=40, 
                    TaskType="FixedDuration",
                    Predecessor = "14FS + 1",
                },
                new TaskInfoModel() { 
                    Id = 16, 
                    Name = "Install plumbing grounds",
                    StartDate = new DateTime(2019, 04, 08), 
                    Duration = "2", 
                    ParentId = 13, 
                    Work=60,
                    Progress=40, 
                    TaskType="FixedDuration",
                    Predecessor = "15FS"
                },
                new TaskInfoModel() { 
                    Id = 17, 
                    Name = "Framing",
                    StartDate = new DateTime(2019, 04, 04), 
                    EndDate = new DateTime(2019,04,28),
                    Work=60,
                    Progress=40, 
                    TaskType="FixedDuration", 
                },
                new TaskInfoModel() { 
                    Id = 18, 
                    Name = "Add load-bearing structure", 
                    StartDate = new DateTime(2019, 04, 03), 
                    Duration = "2", 
                    ParentId = 17, 
                    Work=60,
                    Progress=20, 
                    TaskType="FixedDuration",
                },
                new TaskInfoModel() { 
                    Id = 19, 
                    Name = "Natural gas utilities",
                    StartDate = new DateTime(2019, 04, 08), 
                    Duration = "5", 
                    ParentId = 17, 
                    Work=60,
                    Progress=40, 
                    TaskType="FixedDuration",
                    Predecessor = "18",
                },
                new TaskInfoModel() { 
                    Id = 20, 
                    Name = "Electrical utilities", 
                    StartDate = new DateTime(2022, 04, 01), 
                    Duration = "4", 
                    ParentId = 17, 
                    Work=60, 
                    Progress=50, 
                    TaskType="FixedWork", 
                    Predecessor = "19FS + 1",
                },
                new TaskInfoModel() { 
                    Id = 21, 
                    Name = "Plumbing test", 
                    StartDate = new DateTime(2019, 04, 04), 
                    Duration = "4", 
                    Work=60, 
                    Progress=50, 
                    TaskType="FixedWork", 
                },
                new TaskInfoModel() { 
                    Id = 22, 
                    Name = "Electrical test", 
                    StartDate = new DateTime(2019, 04, 04), 
                    Duration = "4", 
                    Work=60, 
                    Progress=50, 
                    TaskType="FixedWork", 
                    Predecessor = "21"
                },
                new TaskInfoModel() {
                    Id = 23,
                    Name = "First floor initiation",
                    StartDate = new DateTime(2019, 04, 06),
                    Duration = "4",
                    Work=60,
                    Progress=50,
                    TaskType="FixedWork",
                },
                new TaskInfoModel() { 
                    Id = 24, 
                    Name = "Interior work",
                    StartDate = new DateTime(2019, 04, 04), 
                    Duration = "4", 
                    Work=60, 
                    Progress=50, 
                    TaskType="FixedWork", 
                    Predecessor="23"
                },
                new TaskInfoModel() { 
                    Id = 25, 
                    Name = "First floor tile work initation",
                    StartDate = new DateTime(2019, 04, 10), 
                    Duration = "4", 
                    Work=60, 
                    Progress=50, 
                    TaskType="FixedWork", 
                },
                new TaskInfoModel() {
                    Id = 26,
                    Name = "Tile test",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "4",
                    Work=60,
                    Progress=50,
                    TaskType="FixedWork",
                },
                new TaskInfoModel() { 
                    Id = 27, 
                    Name = "Second floor initiation",
                    StartDate = new DateTime(2019, 04, 10), 
                    Duration = "4", 
                    Work=60, 
                    Progress=50, 
                    TaskType="FixedWork", 
                },
                new TaskInfoModel() { 
                    Id = 28, 
                    Name = "Second floor tile work initation",
                    StartDate = new DateTime(2019, 04, 06), 
                    Duration = "4", 
                    Work=60, 
                    Progress=50, 
                    TaskType="FixedWork", 
                    Predecessor="27FS - 1"
                },
                new TaskInfoModel() { 
                    Id = 29, 
                    Name = "Exterior work initation",
                    StartDate = new DateTime(2019, 04, 12), 
                    Duration = "4", 
                    Work=60, 
                    Progress=50, 
                    TaskType="FixedWork", 
                },
                new TaskInfoModel() {
                    Id = 30,
                    Name = "Building test",
                    StartDate = new DateTime(2019, 04, 08),
                    Duration = "4",
                    Work=60,
                    Progress=50,
                    TaskType="FixedWork",
                },
            };
        return Tasks;
    }

    public static List<AssignmentModel> GetAssignmentCollection()
    {
        List<AssignmentModel> assignments = new List<AssignmentModel>()
        {
            new AssignmentModel(){ Id=1, TaskId = 2 , ResourceId=1, Unit=70},
            new AssignmentModel(){ Id=2, TaskId = 3 , ResourceId=1, Unit=70},
            new AssignmentModel(){ Id=3, TaskId = 4 , ResourceId=1},
            new AssignmentModel(){ Id=4, TaskId = 6 , ResourceId=2},
            new AssignmentModel(){ Id=6, TaskId = 8 , ResourceId=2},
            new AssignmentModel(){ Id=7, TaskId = 10 , ResourceId=3},
            new AssignmentModel(){ Id=8, TaskId = 11, ResourceId=3},
            new AssignmentModel(){ Id=9, TaskId = 12 , ResourceId=3},
            new AssignmentModel(){ Id=10, TaskId = 14 , ResourceId=4},
            new AssignmentModel(){ Id=11, TaskId = 15 , ResourceId=4},
            new AssignmentModel(){ Id=12, TaskId = 16 , ResourceId=4},
            new AssignmentModel(){ Id=13, TaskId = 18 , ResourceId=5},
            new AssignmentModel(){ Id=14, TaskId = 19 , ResourceId=5},
            new AssignmentModel(){ Id=15, TaskId = 20 , ResourceId=5},
            new AssignmentModel(){ Id=16, TaskId = 21 , ResourceId=6},
            new AssignmentModel(){ Id=17, TaskId = 22 , ResourceId=6},
            new AssignmentModel(){ Id=18, TaskId = 23 , ResourceId=7},
            new AssignmentModel(){ Id=19, TaskId = 24 , ResourceId=7},
            new AssignmentModel(){ Id=20, TaskId = 25 , ResourceId=8},
            new AssignmentModel(){ Id=21, TaskId = 26 , ResourceId=8},
            new AssignmentModel(){ Id=22, TaskId = 27 , ResourceId=9},
            new AssignmentModel(){ Id=23, TaskId = 28 , ResourceId=9},
            new AssignmentModel(){ Id=24, TaskId = 29 , ResourceId=10},
        };
        return assignments;
    }
}
