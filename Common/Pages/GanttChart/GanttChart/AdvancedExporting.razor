@page "/gantt-chart/advanced-exporting"

@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Navigations
@using Syncfusion.PdfExport
@using Syncfusion.Blazor.Grids
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@
<SampleDescription>
    <p>This sample demonstrates advanced exporting features of Gantt, specifically focusing on exporting Gantt data to PDF format. It includes functionality for adding custom headers, footers and handling taskbar customization in the PDF.</p>
</SampleDescription>
<ActionDescription>
    <p>In this demo, PDF exporting is managed using the <a aria-label="Navigate to the ExportToPdfAsync method reference for gantt chart component" target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.SfGantt-1.html#Syncfusion_Blazor_Gantt_SfGantt_1_ExportToPdfAsync'>ExportToPdfAsync</a> method. Custom headers, footers, and taskbar customization is handled using the <a aria-label="Navigate to the PdfQueryTaskbarInfo event reference" target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttEvents-1.html#Syncfusion_Blazor_Gantt_GanttEvents_1_PdfQueryTaskbarInfo'>PdfQueryTaskbarInfo</a> event.</p>
    <p>
        More information about advanced PDF exporting features in Gantt can be found in the <a aria-label="Navigate to the documentation for advanced exporting in gantt chart component" target='_blank' href='https://blazor.syncfusion.com/documentation/gantt-chart/pdf-export'>documentation section</a>.
    </p>
</ActionDescription>
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGantt @ref="@ganttChartRef" DataSource="@ProjectTasks" EnableCriticalPath="true" AllowResizing="true" AllowPdfExport="true" AllowExcelExport="true" Width="100%" Height="450px" Toolbar="ToolbarItems" ProjectStartDate="@ProjectStartDate">
                <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate"
                 EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId" Dependency="Predecessor">
                </GanttTaskFields>
                <GanttEditSettings AllowEditing="false" AllowAdding="false" AllowTaskbarEditing="false" AllowSchedulingOnDrag="true" Mode="Syncfusion.Blazor.Gantt.EditMode.Dialog"></GanttEditSettings>
                <GanttSplitterSettings ColumnIndex="2"></GanttSplitterSettings>
                <GanttLabelSettings LeftLabel="TaskName" TValue="TaskData"></GanttLabelSettings>
                <GanttColumns>
                    <GanttColumn Field="TaskId" HeaderText="Id"></GanttColumn>
                    <GanttColumn Field="TaskName" HeaderText="Name" Width="250"></GanttColumn>
                    <GanttColumn Field="StartDate" HeaderText="Start Date" Width="100"></GanttColumn>
                    <GanttColumn Field="EndDate" HeaderText="End Date" Width="90px"></GanttColumn>
                    <GanttColumn Field="Duration" HeaderText="Duration" Width="100"></GanttColumn>
                    <GanttColumn Field="Progress" HeaderText="Progress" Width="100"></GanttColumn>
                    <GanttColumn Field="Predecessor" HeaderText="Dependency" Width="105px"></GanttColumn>
                </GanttColumns>
                <GanttEventMarkers>
                    <GanttEventMarker Day="new DateTime(2021, 04, 04)" Label="Project approval and kick-off"
                    CssClass="e-custom-event-marker"></GanttEventMarker>
                    <GanttEventMarker Day="new DateTime(2021, 04, 16)" Label="Branding product"
                    CssClass="e-custom-event-marker"></GanttEventMarker>
                </GanttEventMarkers>
                 <GanttHolidays>
                    <GanttHoliday From="@Holiday1" To="@Holiday2" Label="Public holidays"
                          CssClass="e-custom-holiday"></GanttHoliday>
                    <GanttHoliday From="@Holiday3" To="@Holiday4" Label="Public holiday"
                          CssClass="e-custom-holiday"></GanttHoliday>
                 </GanttHolidays>
                 <GanttEvents OnToolbarClick="ToolbarClickHandler" PdfQueryTaskbarInfo="PdfQueryTaskbarInfoHandler" QueryChartRowInfo="QueryChartRowInfo" TValue=TaskData></GanttEvents>
            </SfGantt>
        </div>
    </div>
</div>
@code {

    private List<TaskData> ProjectTasks { get; set; }
    private DateTime Holiday1 { get; set; } = new DateTime(2021, 04, 11);
    private DateTime Holiday2 { get; set; } = new DateTime(2021, 04, 12);
    private DateTime Holiday3 { get; set; } = new DateTime(2021, 04, 01);
    private DateTime Holiday4 { get; set; } = new DateTime(2021, 04, 01);
    private DateTime ProjectStartDate { get; set; } = new DateTime(2021, 3, 25);
    private string HeaderText { get; set; } = "Product Development Lifecycle\nGantt Chart Report\nApril 2021 - May 2021";
    private string FooterText { get; set; } = $"© 2024 Syncfusion Inc. All Rights Reserved.\nGenerated on: {DateTime.Now:MMMM dd, yyyy h:mm tt}";
    private List<Object> ToolbarItems { get; set; } = new List<Object>() { new ToolbarItem() { Text = "PDF Export", TooltipText = "PDF Export", Id = "PdfExport", PrefixIcon = "e-pdfexport" } };
    private SfGantt<TaskData> ganttChartRef;
    protected override async Task OnInitializedAsync()
    {
        ProjectTasks = TaskCollection();
        await Task.CompletedTask;
    }

    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public string Predecessor { get; set; }
        public string Notes { get; set; }
        public int? ParentId { get; set; }

    }
    private async void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "PdfExport")
        {
            await ExportPdf();
        }
    }
    private async Task ExportPdf()
    {
        List<PdfHeaderFooterContent> HeaderContent = new List<PdfHeaderFooterContent>()
        {
            new PdfHeaderFooterContent()
            {
                Type = ContentType.Text,
                Value = HeaderText,
                Position = new PdfPosition(){ X=20, Y=20 },
                Style = new PdfContentStyle()
                {
                    Font = new PdfGridFont()
                    {
                        FontFamily = new PdfStandardFont(PdfFontFamily.Helvetica, 13, PdfFontStyle.Bold),
                        FontSize = 14,
                        IsTrueType = false,
                        FontStyle = PdfFontStyle.Underline,
                        TextColor = "DarkBlue"
                    },
                    Border = new PdfBorder()
                    {
                        Color = "Blue",
                        Width = 1,
                        DashStyle = Syncfusion.Blazor.Grids.PdfDashStyle.DashDot,
                        LineStyle = Syncfusion.Blazor.Grids.BorderLineStyle.Thick
                    }
                }
            },
        };


        List<PdfHeaderFooterContent> FooterContents = new List<PdfHeaderFooterContent>()
        {
            new PdfHeaderFooterContent()
            {
                Type = ContentType.Text,
                Value = FooterText,
                Position = new PdfPosition() { X = 300, Y = 670 },
                Style = new PdfContentStyle()
                {
                    Font = new PdfGridFont()
                    {
                        FontFamily = new PdfStandardFont(PdfFontFamily.Helvetica, 13, PdfFontStyle.Bold),
                        FontSize = 10,
                        IsTrueType = false,
                        FontStyle = PdfFontStyle.Regular,
                        TextColor = "#3a435e"
                    },
                    Border = new PdfBorder()
                    {
                        Color = "Blue",
                        Width = 1,
                        DashStyle = Syncfusion.Blazor.Grids.PdfDashStyle.DashDot,
                        LineStyle = Syncfusion.Blazor.Grids.BorderLineStyle.Thick
                    }
                }
            },

        };

        GanttPdfExportProperties pdfExport = new GanttPdfExportProperties();
        PdfHeader Header = new PdfHeader()
            {
                FromTop = 0,
                Left = 0,
                Height = 100,
                Contents = HeaderContent
            };
        PdfFooter Footer = new PdfFooter()
            {
                FromBottom = 0,
                Left = 0,
                Height = 100,
                Contents = FooterContents
            };
        pdfExport.FileName = "Product Development Report.pdf";
        pdfExport.Header = Header;
        pdfExport.Footer = Footer;
        await ganttChartRef.ExportToPdfAsync(pdfExport);
    }
    private async Task QueryChartRowInfo(QueryChartRowInfoEventArgs<TaskData> args)
    {
        if (args.GanttTaskModel.IsCritical && !args.GanttTaskModel.HasChildRecords)
        {
            if (NavigationManager.Uri.Contains("dark") || NavigationManager.Uri.Contains("highcontrast"))
            {
                args.Row.AddClass(new string[] { "taskbar-critical-dark progress-critical-dark" });
            }
            else
            {
                args.Row.AddClass(new string[] { "taskbar-critical progress-critical" });
            }
        }
        await Task.CompletedTask;
    }
    private void PdfQueryTaskbarInfoHandler(PdfQueryTaskbarInfoEventArgs<TaskData> args)
    {
        args.TaskbarStyle.Color = new PdfTaskbarColor();
        if (NavigationManager.Uri.Contains("dark") || NavigationManager.Uri.Contains("highcontrast"))
        {
            args.TaskbarStyle.Color.CriticalPathProgressColor = new Syncfusion.PdfExport.PdfColor(172, 6, 136);
            args.TaskbarStyle.Color.CriticalPathTaskbarColor = new Syncfusion.PdfExport.PdfColor(73, 4, 58);
        }
        else
        {
            args.TaskbarStyle.Color.CriticalPathProgressColor = new Syncfusion.PdfExport.PdfColor(176, 0, 138);
            args.TaskbarStyle.Color.CriticalPathTaskbarColor = new Syncfusion.PdfExport.PdfColor(255, 206, 244);
        }
    }

    private static List<TaskData> TaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>()
        {
            new TaskData() { TaskId = 1, TaskName = "Product concept", StartDate = new DateTime(2021, 04, 02), EndDate = new DateTime(2021, 04, 08), Duration = "5 days" },
            new TaskData() { TaskId = 2, TaskName = "Defining the product usage", StartDate = new DateTime(2021, 04, 02), EndDate = new DateTime(2021, 04, 08), Duration = "3", Progress = 30, ParentId = 1 },
            new TaskData() { TaskId = 3, TaskName = "Defining the target audience", StartDate = new DateTime(2021, 04, 02), EndDate = new DateTime(2021, 04, 04), Duration = "3", Progress = 40, ParentId = 1 },
            new TaskData() { TaskId = 4, TaskName = "Prepare product sketch and notes", StartDate = new DateTime(2021, 04, 05), EndDate = new DateTime(2021, 04, 08), Duration = "2", Progress = 30, ParentId = 1, Predecessor = "2" },
            new TaskData() { TaskId = 5, TaskName = "Concept approval", StartDate = new DateTime(2021, 04, 08), EndDate = new DateTime(2021, 04, 08), Duration = "0", Predecessor = "3,4" },
            new TaskData() { TaskId = 6, TaskName = "Market research", StartDate = new DateTime(2021, 04, 09), EndDate = new DateTime(2021, 04, 18), Predecessor = "2", Duration = "4", Progress = 30 },
            new TaskData() { TaskId = 7, TaskName = "Demand analysis", StartDate = new DateTime(2021, 04, 09), EndDate = new DateTime(2021, 04, 12), Duration = "4", Progress = 40, ParentId = 6 },
            new TaskData() { TaskId = 8, TaskName = "Customer strength", StartDate = new DateTime(2021, 04, 09), EndDate = new DateTime(2021, 04, 12), Duration = "4", Progress = 30, ParentId = 7, Predecessor = "5" },
            new TaskData() { TaskId = 9, TaskName = "Market opportunity analysis", StartDate = new DateTime(2021, 04, 09), EndDate = new DateTime(2021, 04, 012), Duration = "4", ParentId = 7, Predecessor = "5" },
            new TaskData() { TaskId = 10, TaskName = "Competitor analysis", StartDate = new DateTime(2021, 04, 15), EndDate = new DateTime(2021, 04, 18), Duration = "4", Progress = 30, ParentId = 6, Predecessor = "7,8" },
            new TaskData() { TaskId = 11, TaskName = "Product strength analysis", StartDate = new DateTime(2021, 04, 15), EndDate = new DateTime(2021, 04, 18), Duration = "4", Progress = 40, ParentId = 6, Predecessor = "9" },
            new TaskData() { TaskId = 12, TaskName = "Research completed", StartDate = new DateTime(2021, 04, 18), EndDate = new DateTime(2021, 04, 18), Duration = "0", Progress = 30, ParentId = 6, Predecessor = "10" },
            new TaskData() { TaskId = 13, TaskName = "Product design and development", StartDate = new DateTime(2021, 04, 19), EndDate = new DateTime(2021, 05, 16), Duration = "20", Predecessor = "6" },
            new TaskData() { TaskId = 14, TaskName = "Functionality design", StartDate = new DateTime(2021, 04, 19), EndDate = new DateTime(2021, 04, 23), Duration = "3", Progress = 30, ParentId = 13, Predecessor = "12" },
            new TaskData() { TaskId = 15, TaskName = "Quality design", StartDate = new DateTime(2021, 04, 19), EndDate = new DateTime(2021, 04, 23), Duration = "3", Progress = 40, ParentId = 13, Predecessor = "12" },
            new TaskData() { TaskId = 16, TaskName = "Define reliability", StartDate = new DateTime(2021, 04, 24), EndDate = new DateTime(2021, 04, 25), Duration = "2", Progress = 30, ParentId = 13, Predecessor = "15" },
            new TaskData() { TaskId = 17, TaskName = "Identifying raw materials", StartDate = new DateTime(2021, 04, 24), EndDate = new DateTime(2021, 04, 25), Duration = "2", ParentId = 13, Predecessor = "15" },
            new TaskData() { TaskId = 18, TaskName = "Define cost plan", StartDate = new DateTime(2021, 04, 26), EndDate = new DateTime(2021, 04, 29), Duration = "2", Progress = 30, ParentId = 13, Predecessor = "17" },
            new TaskData() { TaskId = 19, TaskName = "Manufacturing cost", StartDate = new DateTime(2021, 04, 26), EndDate = new DateTime(2021, 04, 29), Duration = "2", Progress = 40, ParentId = 18, Predecessor = "17" },
            new TaskData() { TaskId = 20, TaskName = "Selling cost", StartDate = new DateTime(2021, 04, 26), EndDate = new DateTime(2021, 04, 29), Duration = "2", Progress = 30, ParentId = 18, Predecessor = "17" },
            new TaskData() { TaskId = 21, TaskName = "Development of final design", StartDate = new DateTime(2021, 04, 30), EndDate = new DateTime(2021, 05, 08), Duration = "7", ParentId = 13 },
            new TaskData() { TaskId = 22, TaskName = "Develop dimensions and design", StartDate = new DateTime(2021, 04, 30), EndDate = new DateTime(2021, 05, 01), Duration = "2", Progress = 30, ParentId = 21, Predecessor = "19,20" },
            new TaskData() { TaskId = 23, TaskName = "Develop designs to meet industry", StartDate = new DateTime(2021, 05, 02), EndDate = new DateTime(2021, 05, 03), Duration = "2", Progress = 40, ParentId = 21, Predecessor = "22" },
            new TaskData() { TaskId = 24, TaskName = "Include all the details", StartDate = new DateTime(2021, 05, 06), EndDate = new DateTime(2021, 05, 08), Duration = "3", Progress = 30, ParentId = 21, Predecessor = "23" },
        };
        return Tasks;
    }
}
<style>
    .taskbar-critical .e-gantt-child-taskbar {
        background: #FFCEF4 !important;
        outline: 1px solid #FFCEF4 !important;
    }
    .progress-critical .e-gantt-child-progressbar {
        background: #B0008A !important;
    }

    .taskbar-critical-dark .e-gantt-child-taskbar {
        background: #49043A !important;
        outline: 1px solid #49043A !important;
    }

    .progress-critical-dark .e-gantt-child-progressbar {
        background: #AC0688 !important;
    }
</style>