@page "/otp-input/api"
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Notifications

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates the properties available in the OTP Input component.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        This sample can be customized further with the combination of OTP Input properties from the property pane. For example,
    </p>
    <ul>
        <li>The input style can be changed by selecting the Styling Mode dropdownlist from the property pane.</li>
        <li>The validation state can be changed by selecting the Validation Status dropdownlist from the property pane.</li>
        <li>The hint placeholder character can be updated by using the Placeholder textbox from the property pane.</li>
        <li>The separator character (-) can be updated by using the Separator textbox from the property pane.</li>
        <li>The input field length can be changed by using the Length numerictextbox from the property pane.</li>
        <li>Enable or Disable the OTP Input by toggling the Disabled switcher button.</li>
    </ul>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <div class="api-otp-wrapper">
        <SfToast ID="toast_default" @ref="ToastObj" Title="Entered OTP value" Content="@ToastContent" Timeout="3000">
            <ToastPosition X="Right"></ToastPosition>
        </SfToast>
        <div id="otp-container">
            <div class="form-container">
                <span class="otp-header"> Enter verification code </span>
                <SfOtpInput StylingMode="@StyleMode" Disabled=@Disabled @bind-Value="@otpValue" OnInput="@handleOtpChange" Length=@Length Separator="@Seperator" Placeholder="@PlaceHolder" CssClass="@CssClass"></SfOtpInput>
                <div class="otp-actions">
                    <button class="e-btn" type="button" disabled="@disableResetBtn" @onclick="clearOTP"> Clear </button>
                    <button class="e-btn e-primary" type="button" disabled="@disableVerifyBtn" @onclick="verifyOTP"> Verify </button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table id="property" title="Properties">
                <tbody>
                    <tr>
                        <td class="property-styles">Styling Mode</td>
                        <td>
                            <SfDropDownList TValue="string" TItem="DropDownModel" DataSource="@StyleListData" @bind-Value="@DefaultValue" PopupHeight="200px">
                                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="DropDownModel" ValueChange="@ChangeStyle" />
                            </SfDropDownList>
                        </td>
                    </tr>
                    <tr>
                        <td class="property-styles">Validation Status</td>
                        <td>
                            <SfDropDownList TValue="string" TItem="DropDownModel" DataSource="@ValidationData" @bind-Value="@ValidationValue" PopupHeight="200px">
                                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="DropDownModel" ValueChange="@Validation" />
                            </SfDropDownList>
                        </td>
                    </tr>
                    <tr>
                        <td><label for="plcaeholder" class="property-styles"> Placeholder </label></td>
                        <td>
                            <SfTextBox CssClass="e-underline" @bind-Value="@PlaceHolder" maxlength="@textBoxLength" Type=InputType.Text Input="@InputHandler"></SfTextBox>
                        </td>
                    </tr>
                    <tr>
                        <td><label for="separator" class="property-styles"> Separator </label></td>
                        <td><SfTextBox CssClass="e-underline" @bind-Value="@Seperator" maxlength="1" Type=InputType.Text Input="@ChangeSeperator"></SfTextBox></td>
                    </tr>
                    <tr>
                        <td><label for="length" class="property-styles"> Length </label></td>
                        <td>
                            <SfNumericTextBox TValue="int" Min=1 Max=6 Format="0" @bind-Value=@NumericValue>
                                <NumericTextBoxEvents TValue="int" ValueChange="ValueChangeHandler"></NumericTextBoxEvents>
                            </SfNumericTextBox>
                        </td>
                    </tr>
                    <tr>
                        <td><label for="disabled" class="property-styles"> Disabled </label></td>
                        <td> <SfSwitch ValueChange="@Change" TChecked="bool?"></SfSwitch> </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
@code {
    private SfToast ToastObj;
    private string otpValue = "";
    private string ToastContent { get; set; } = "";
    private string CssClass;
    private string DefaultValue { get; set; } = "Outlined";
    private string ValidationValue { get; set; } = "None";
    private bool Disabled { get; set; } = false;
    private string PlaceHolder { get; set; } = "x";
    private string Seperator { get; set; } = "-";
    private int Length { get; set; } = 4;
    private int NumericValue { get; set; } = 4;
    private int textBoxLength { get; set; } = 4;
    private OtpInputStyle StyleMode { get; set; } = OtpInputStyle.Outlined;
    private bool disableResetBtn { get; set; } = true;
    private bool disableVerifyBtn { get; set; } = true;

    public class DropDownModel
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }
    private List<DropDownModel> StyleListData = new List<DropDownModel>()
    {
        new DropDownModel { Text = "Outlined", Value = "Outlined" },
        new DropDownModel { Text = "Underlined", Value = "Underlined" },
        new DropDownModel { Text = "Filled", Value = "Filled" }
    };
    private List<DropDownModel> ValidationData = new List<DropDownModel>()
    {
        new DropDownModel { Text = "None", Value = "None" },
        new DropDownModel { Text = "Success", Value = "success" },
        new DropDownModel { Text = "Warning", Value = "warning" },
        new DropDownModel { Text = "Error", Value = "error" }
    };
    private void ChangeStyle(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownModel> args)
    {
        StyleMode = (OtpInputStyle)Enum.Parse(typeof(OtpInputStyle), args.Value.ToString());
    }
    private void Validation(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownModel> args)
    {
        CssClass = args.Value == "None" ? "" : "e-" + args.Value.ToString();
    }
    private void Change(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args)
    {
        Disabled = (bool)args.Checked;
    }
    private void InputHandler(InputEventArgs args)
    {
        PlaceHolder = args.Value.ToString();
    }
    private void ChangeSeperator(InputEventArgs args)
    {
        Seperator = args.Value.ToString();
    }
    private void ValueChangeHandler(Syncfusion.Blazor.Inputs.ChangeEventArgs<int> args)
    {
        textBoxLength = Length = args.Value;
    }
    private void handleOtpChange(OtpInputEventArgs args)
    {
        ToastContent = otpValue;
        var otpLength = args.Value.Length;
        disableVerifyBtn = Length != otpLength;
        disableResetBtn = otpLength == 0;
    }
    private void clearOTP()
    {
        otpValue = "";
        disableResetBtn = disableVerifyBtn = true;
    }
    private async Task verifyOTP()
    {
        await this.ToastObj.ShowAsync();
    }
}
<style>
    .api-otp-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        padding-top: 20px;
        padding-bottom: 20px;
        min-height: 350px;
    }

    #otp-container {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50%;
    }

    .form-container {
        height: 220px;
        padding: 1rem 3rem;
        box-shadow: 0 1px 3px #d4d4d5, 0 0 0 1px #d4d4d5;
        border-radius: 4px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .form-container > div {
        margin: 17px 0px;
    }

    .form-container .otp-header {
        display: inline-block;
        font-size: 1.4em;
        font-weight: 500;
        margin: 10px 0px;
    }

    .form-container .otp-actions {
        display: flex;
        gap: 20px;
    }

    .otp-actions button {
        width: 80px;
    }

    .property-panel-content td {
        padding: 10px 0px;
        width: 35%;
    }

    .property-styles {
        font-weight: 400;
    }

</style>
