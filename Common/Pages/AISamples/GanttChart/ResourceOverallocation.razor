@page "/ai-ganttchart/resource-manager"


@inject AzureAIService OpenAIService
@using BlazorDemos.Model
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using BlazorDemos.Service

@inject IJSRuntime JsInterop
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@*End:Hidden*@

<SampleDescription>
     <p>This sample demonstrates how to efficiently manage resource overallocation by reallocating available resources to tasks. It visually updates the Gantt Chart by changing the color of the taskbars to reflect the reallocated tasks, allowing for better tracking and management of resource usage. The process helps ensure that no single resource is overburdened, maintaining an optimized workflow.</p>
    <p>To explore this and more Syncfusion Blazor Smart AI integrations locally, check out our <a target='_blank' href='https://github.com/syncfusion/smart-ai-samples/tree/master/blazor' aria-label="Navigate to explore the syncfusion Blazor AI Demos repository">GitHub repository</a>.</p>
</SampleDescription>
<ActionDescription>
    <p>The sample reallocates tasks to prevent resource overallocation. The reallocation process involves interacting with the TaskCollection, ResourceCollection, and AssignmentCollection to generate a new assignment collection. This new collection resolves any overallocated tasks by redistributing them within the same resource, ensuring balanced resource utilization. Taskbar colors are updated accordingly to indicate the changes in allocation, providing clear visual feedback on the resource adjustments.</p>
</ActionDescription>

@*Hidden:Lines*@
@{#if (SHOW_GIF_IMAGES)}
<img src="@NavigationManager.ToAbsoluteUri($" {SampleService.WebAssetsPath}images/smartcomponents/gantt/resource-manager.gif")" style="width:100%; height:100%;" />

@{#else}
@*End:Hidden*@
<div class="col-lg-12 control-section">
    @if (showMessage)
    {
        <div>
            <span>Something went wrong <button @onclick="Reload" class="btn btn-primary my-2">click</button> to reload.</span>
        </div>
    }
    <SfGantt @ref="Gantt" ViewType="ViewType.ResourceView" ShowOverallocation="true" DataSource="@TaskCollection" Height="450px" Width="100%" TreeColumnIndex="1" ProjectStartDate="@ProjectStart" ProjectEndDate="@ProjectEnd" WorkUnit="WorkUnit.Hour">
        <GanttTaskFields Id="Id" Name="Name" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                         ParentID="ParentId" Work="Work" TaskType="TaskType">
        </GanttTaskFields>
        <GanttResource DataSource="ResourceCollection" Id="Id" Name="Name" MaxUnits="MaxUnit" TValue="GanttDataModel.TaskInfoModel" TResources="GanttDataModel.ResourceInfoModel"></GanttResource>
        <GanttAssignmentFields DataSource="AssignmentCollection" PrimaryKey="PrimaryId" TaskID="TaskId" ResourceID="ResourceId" Units="Unit" TValue="GanttDataModel.TaskInfoModel" TAssignment="GanttDataModel.AssignmentModel"></GanttAssignmentFields>
        <GanttLabelSettings RightLabel="Resources" TValue="GanttDataModel.TaskInfoModel"></GanttLabelSettings>
        <GanttEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" AllowTaskbarEditing="true"
                           ShowDeleteConfirmDialog="true"></GanttEditSettings>
        <GanttColumns>
            <GanttColumn Field="Id" HeaderText="ID"></GanttColumn>
            <GanttColumn Field="Name" HeaderText="Event Name" Width="250px"></GanttColumn>
            <GanttResourceColumn HeaderText="Event Resources"></GanttResourceColumn>
            <GanttColumn Field="Work" HeaderText="Work (Hours)"></GanttColumn>
            <GanttColumn Field="Duration" HeaderText="Duration"></GanttColumn>
            <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
            <GanttColumn Field="EndDate" HeaderText="End Date"></GanttColumn>
        </GanttColumns>
        <GanttTemplates TValue="GanttDataModel.TaskInfoModel">
            <TaskbarTemplate>
                @{
                    var task = (context as GanttDataModel.TaskInfoModel);
                    if (task == null)
                    {
                        return;
                    }
                    var taskModel = Gantt.GetRowTaskModel(task);
                    string taskbarClassName = string.Empty;
                    string progressClassName = string.Empty;
                    if (TaskIds.Count > 0 && TaskIds.Any(s => s == task.Id))
                    {
                        taskbarClassName = "e-custom-taskbar";
                        progressClassName = "e-custom-progress";
                    }
                    <div class="e-gantt-child-taskbar e-gantt-child-taskbar-inner-div @taskbarClassName" style="height:22px;" tabindex=-1>
                        <div class="e-gantt-child-progressbar-inner-div e-gantt-child-progressbar @progressClassName" style="height:22px;width:@(taskModel.ProgressWidth + "px");text-align: right;border-radius: 0px;">
                        </div>
                    </div>
                }
            </TaskbarTemplate>
        </GanttTemplates>
        <GanttSplitterSettings Position="28%"> </GanttSplitterSettings>
        <SfToolbar ID="Gantt_Resource_Toolbar">
            <ToolbarItems>
                <ToolbarItem>
                    <Template>
                        <SfButton IsPrimary ID="openAI" @onclick="OpenAIHandler">Optimize resource allocation</SfButton>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
    </SfGantt>
</div>
@*Hidden:Lines*@
@{#endif}
@*End:Hidden*@
@code {
    public SfGantt<GanttDataModel.TaskInfoModel> Gantt;
    private DateTime ProjectStart = new DateTime(2021, 3, 28);
    private DateTime ProjectEnd = new DateTime(2021, 7, 28);
    private List<GanttDataModel.TaskInfoModel> TaskCollection { get; set; }
    private List<GanttDataModel.ResourceInfoModel> ResourceCollection { get; set; }
    private static List<GanttDataModel.AssignmentModel> AssignmentCollection { get; set; }
    private string AIPrompt = string.Empty;
    private bool showMessage;
    List<int> TaskIds = new();
    protected override void OnInitialized()
    {
        TaskCollection = GanttDataModel.GetTaskCollection();
        ResourceCollection = GanttDataModel.GetResources;
        AssignmentCollection = GanttDataModel.GetAssignmentCollection();
    }
    private string GeneratePrompt(List<GanttDataModel.TaskInfoModel> TaskCollection, List<GanttDataModel.ResourceInfoModel> ResourceCollection, List<GanttDataModel.AssignmentModel> AssignmentCollection)
    {
        return @"Here's a revised prompt to ensure the AI provides the results in JSON format:

    Function as an AI assistant responsible for optimizing resource assignments in a project management system. Your goal is to prevent overlapping task assignments for each resource, ensuring no resource is double-booked.

    1. **Check Task Assignments:** Review the start and end dates of tasks assigned to each resource to identify overlaps.

    2. **Resolve Conflicts:** Reassign conflicting tasks to other available resources without scheduling conflicts, ensuring each task is assigned to a resource.

    3. **Provide Updated Assignments:** Return the updated assignments.

    Please return a JSON object with the following:

    - **AssignmentCollection:** Updated resource assignments.
    - **TaskIds:** List of task IDs where resource assignments have changed.

    The response must be in JSON format only, with no additional explanations or content. 

    Here is the dataset:
    - Task Collection Data: " + JsonSerializer.Serialize(TaskCollection) + @"
    - Resource Collection Data: " + JsonSerializer.Serialize(ResourceCollection) + @"
    - Assignment Collection Data: " + JsonSerializer.Serialize(AssignmentCollection) + @"

    Note: Ensure the response is a JSON string and does not include any extra information.";
    }
    private async Task Reload()
    {
        await JsInterop.InvokeVoidAsync("window.location.reload");
    }
    private async Task OpenAIHandler()
    {
        await Gantt.ShowSpinnerAsync();
        TaskIds = new();
        showMessage = false;
        List<GanttDataModel.AssignmentModel> sortedCollection = new List<GanttDataModel.AssignmentModel>();
        var AIPrompt = GeneratePrompt(TaskCollection, ResourceCollection, AssignmentCollection);
        string result = await OpenAIService.GetCompletionAsync(AIPrompt);
        try
        {
            if (result.StartsWith("```json"))
            {
                result = result.Replace("```json", "").Replace("```", "").Trim();
            }
            else if (result.StartsWith("```"))
            {
                result = result.Replace("```", "").Replace("```", "").Trim();
            }
            string response = JsonDocument.Parse(result).RootElement.GetProperty("AssignmentCollection").ToString();
            string taskIdCollection = JsonDocument.Parse(result).RootElement.GetProperty("TaskIds").ToString();
            if (response is not null)
            {
                var collection = JsonSerializer.Deserialize<List<GanttDataModel.AssignmentModel>>(response);
                if (collection is not null)
                {
                    sortedCollection = collection;
                }
            }
            if (taskIdCollection is not null)
            {
                var collection = JsonSerializer.Deserialize<List<int>>(taskIdCollection);
                if (collection is not null)
                {
                    TaskIds = collection;
                }
            }
            if (sortedCollection is not null && sortedCollection.Count > 0)
            {
                AssignmentCollection = sortedCollection.Cast<GanttDataModel.AssignmentModel>().ToList();
            }
        }
        catch (Exception e)
        {
            showMessage = true;
            await Gantt.HideSpinnerAsync();
            return;
        }
        await Gantt.HideSpinnerAsync();
        await Task.CompletedTask;
    }
}
<style>
    .e-custom-taskbar {
        background-color: lightgreen !important;
    }

    .e-custom-progress {
        background-color: green !important;
    }
</style>