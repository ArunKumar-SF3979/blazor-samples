@page "/ai-pdfviewer-2/summarizer"
@using System.IO
@using Microsoft.JSInterop
@using Syncfusion.Blazor
@using Syncfusion.Blazor.SfPdfViewer
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@inject IJSRuntime JsRuntime
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.InteractiveChat
@using Syncfusion.Blazor.SplitButtons
@using System.Text.RegularExpressions;
@using BlazorDemos.Model
@using BlazorDemos.Service
@inject AzureAIService semanticKernelAI
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IDisposable
@*End:Hidden*@


<SampleDescription>
    <p>
        This sample showcases how the Syncfusion Blazor PDF Viewer can intelligently perform PDF summarization and Q&A. Users can obtain a summary of a PDF document by clicking the "AI AssistView" button at the bottom-right of the PDFViewer. After the summary is generated, users can ask questions related to the document, using either their own queries or AI-generated suggestions.
    </p>
    <p>To explore this and more Syncfusion Blazor Smart AI integrations locally, check out our <a target='_blank' href='https://github.com/syncfusion/smart-ai-samples/tree/master/blazor' aria-label="Navigate to explore the syncfusion Blazor AI Demos repository">GitHub repository</a>.</p>
</SampleDescription>

<ActionDescription>
    <p>
        <strong>PDF Summarization:</strong> PDF Summarization provides users with a comprehensive overview of a document's content. The AI generates a detailed summary, highlighting key points. This feature streamlines understanding complex documents in just a few clicks.
    </p>
    
    <p>
        <strong>Q&A:</strong> The Q&A feature allows users to ask questions about the document's content. Users can either input their own queries or choose from AI-generated suggestions. This makes it easier to find specific information within the document.
    </p>

    <p>
        <strong>Reference Page Navigation:</strong> This feature allows users to navigate directly to relevant pages in the document based on their queries. When a question is asked, the tool identifies the specific content and directs the user to the corresponding page. It streamlines finding specific information within the document.
    </p>
</ActionDescription>
@*Hidden:Lines*@
@{#if (SHOW_GIF_IMAGES)}
<img src="@NavigationManager.ToAbsoluteUri($" {SampleService.WebAssetsPath}images/smartcomponents/pdf-viewer/summarize.gif")" style="width:100%; height:100%;" />
@{#else}
@*End:Hidden*@
<div class="control-section">
    <div class="parent-container">
        <div id="left">
            <SfPdfViewer2 @ref="sfPdfViewer2" DocumentPath="https://cdn.syncfusion.com/content/pdf/pdf-succinctly.pdf">
                <PdfViewerEvents DocumentLoaded="DocumentLoaded" DocumentUnloaded="DocumentUnLoaded"></PdfViewerEvents>
            </SfPdfViewer2>
            @if (isDocumentLoaded && !isPopupVisible)
            {
                <SfButton IconCss="e-icons e-aiassist-chat" Content="AI Assist View" CssClass="toggleButton" @onclick="toggleAssistView"></SfButton>
            }
        </div>

        @if (isPopupVisible)
        {
            <div id="right">
                <SfAIAssistView @ref="aIAssistView" Height="100%" Prompts="@_prompts" PromptPlaceholder="@_promptPlaceholder" PromptSuggestionsHeader="Suggested Prompts"
                                PromptSuggestions="@_promptSuggestions" ResponseIconCss="e-icons e-aiassist-chat"
                                PromptRequested="@OnPromptRequested" CssClass="custom-ai-assist">

                    <AssistViews>
                        <AssistView IconCss="e-icons e-aiassist-chat">
                            <BannerTemplate>
                                <div class="ai-assist-banner">
                                    <div class="e-icons e-aiassist-chat"></div>
                                    <h2>AI Assistance</h2>
                                    <div class="ai-assist-banner-subtitle">Your everyday AI companion</div>
                                </div>
                            </BannerTemplate>
                            <ChildContent>
                                <PromptToolbar ItemClicked="PromptToolbarItemClicked">
                                </PromptToolbar>

                                <ResponseToolbar ItemClicked="ResponseToolbarItemClicked">
                                </ResponseToolbar>
                            </ChildContent>
                        </AssistView>            
                    </AssistViews>

                    <AssistViewToolbar ItemClicked="ToolbarItemClicked">
                        <AssistViewToolbarItem Type="ItemType.Spacer"></AssistViewToolbarItem>
                        <AssistViewToolbarItem IconCss="e-icons e-refresh"></AssistViewToolbarItem>
                        <AssistViewToolbarItem IconCss="e-icons e-close"></AssistViewToolbarItem>
                    </AssistViewToolbar>
                </SfAIAssistView>
            </div>
        }
    </div>
</div>
@*Hidden:Lines*@
@{#endif}
@*End:Hidden*@
@code {
    private static SfPdfViewer2 sfPdfViewer2;
    private SfAIAssistView aIAssistView;
    private bool isPopupVisible = false;
    private bool isMobileDevice = false;
    private bool isDocumentLoaded = false;
    private bool isSummarized = false;
    private bool isDocumentLoadedInAI = false;
    private bool refreshContainer = false;
    private DocumentSummarizer documentSummarizer = new DocumentSummarizer();
    private MemoryStream documentStream = new MemoryStream();
    private string _promptPlaceholder = "Type your prompt for assistance...";

    private List<string> _promptSuggestions = new List<string>();
    // {
    //     "Who is the author?",
    //     "How many pages in this document?",
    //     "Summarize this PDF in 2 lines"
    // };
    private void PromptToolbarItemClicked(AssistViewToolbarItemClickedEventArgs args)
    {
        // handle your actions
    }

    private void ResponseToolbarItemClicked(AssistViewToolbarItemClickedEventArgs args)
    {
        // handle your actions
    }

    private List<AssistViewPrompt> _prompts = new List<AssistViewPrompt>();

    private void toggleAssistView()
    {
        isPopupVisible = !isPopupVisible;
        refreshContainer = true;
    }

    //Will be called when the prompt is entered 
    private async Task OnPromptRequested(AssistViewPromptRequestedEventArgs args)
    {
        await Task.Delay(2000);
        //get the response from the AI for the prompt
        if (args.Prompt == "Summarize this document.")
        {
            args.Response = await SummaryPDF();
        }
        else
        {
            args.Response = await documentSummarizer.GetAnswer(args.Prompt);
        }
        string pattern = @"\[(?:Page )?(\d+(?:,\s*\d+)*)\]";

        // Replace the pattern with an HTML anchor tag
        args.Response = Regex.Replace(args.Response, pattern, m =>
        {
            // Split the matched value by commas and optional spaces
            var pages = m.Groups[1].Value.Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
            var links = string.Join(", ", pages.Select(page => $"<a href=\"#\" onclick=\"goToPage({page})\">{page}</a>"));
            return $"[{links}]";
        });
    }

    [JSInvokable]
    public async Task GoToPage(int pageNumber)
    {
        if (pageNumber > 0)
        {
            await sfPdfViewer2.GoToPageAsync(pageNumber);
            if (isMobileDevice)
            {
                isPopupVisible = false;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isMobileDevice = await JsRuntime.InvokeAsync<bool>("isMobileDevice", false);
            var dotNetObjectRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("initializeJSInterop", dotNetObjectRef);
        }
        await base.OnAfterRenderAsync(firstRender);
        if (refreshContainer)
        {
            await sfPdfViewer2.UpdateViewerContainerAsync();
            if (isPopupVisible && !isSummarized)
            {
                isSummarized = true;
                //Initial prompt for AI
                await aIAssistView.ExecutePromptAsync("Summarize this document.");
                string suggestions = await documentSummarizer.GetSuggestions();
                _promptSuggestions = new List<string>(suggestions.Split('\n').Where(s => !string.IsNullOrWhiteSpace(s)));
                StateHasChanged();
            }
            refreshContainer = false;
        }
    }

    private async void ToolbarItemClicked(AssistViewToolbarItemClickedEventArgs args)
    {
        if (args.Item.IconCss == "e-icons e-close")
        {
            // Close the popup and refresh the container
            isPopupVisible = false;
            refreshContainer = true;
        }
        else if (args.Item.IconCss == "e-icons e-refresh")
        {
            if (_prompts.Count > 0)
            {
                AssistViewPrompt lastPrompt = _prompts.Last();
                // Remove the last prompt from the list
                _prompts.RemoveAt(_prompts.Count - 1);
                // Request the last prompt from the list
                await aIAssistView.ExecutePromptAsync(lastPrompt.Prompt);
            }
        }
    }

    public  void DocumentLoaded(LoadEventArgs args)
    {
        isDocumentLoaded = true;

    }
    public void DocumentUnLoaded(UnloadEventArgs args)
    {
        //reset to initial state
        isDocumentLoaded = false;
        isSummarized = false;
        isDocumentLoadedInAI = false;
        isPopupVisible = false;
        _prompts?.Clear();
        _promptSuggestions?.Clear();
    }

    public void Dispose()
    {
        isDocumentLoaded = false;
        isSummarized = false;
        isDocumentLoadedInAI = false;
        isPopupVisible = false;
        _prompts?.Clear();
        _promptSuggestions?.Clear();
        if (documentSummarizer is IDisposable disposableSummarizer)
        {
            disposableSummarizer.Dispose();
        }
        documentStream?.Dispose();
    }
    
  #region AI Query Methods
    private async Task<string> SummaryPDF()
    {
        if (!isDocumentLoadedInAI)
        {
            byte[] bytes = await sfPdfViewer2.GetDocumentAsync();
            documentStream = new MemoryStream(bytes);
            documentSummarizer.InitializeOpenAI(semanticKernelAI);
            await documentSummarizer.LoadDocument(documentStream, "application/pdf");
            isDocumentLoadedInAI = true;
        }
        //get the summary of the PDF
        return await documentSummarizer.GetDocumentSummary();
    }
  #endregion
}
<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
    }

    .parent-container {
        display: flex;
        height: 100vh;
        width: 100%
    }

    #left {
        width: 100%;
        background-color: lightblue;
        transition: width 0.5s;
        position: relative;
    }

    #right {
        width: 40% !important;
        background-color: lightgreen;
        transition: width 0.5s;
        height: 100% !important;
    }

    .toggleButton {
        position: absolute;
        bottom: 3%;
        right: 3%;
        padding: 10px 20px !important;
        background-color: darkblue !important;
        color: white !important;
        border: none !important;
        cursor: pointer !important;
        z-index:1001
    }

    .toggleButton:hover {
        background-color: darkcyan;
    }

    .e-aiassist-footer,
    .e-aiassist-view-container {
        width: 100% !important;
    }

    html, body {
        height: 100%;
    }

    .custom-dialog .e-dlg-content {
        padding: 0;
    }

    .custom-ai-assist {
        border: none;
    }

    .ai-assist-banner {
        display: flex;
        flex-direction: column;
        justify-content: center;
        height: 200px;
        font-size: 18px;
        align-items: center;
        text-align: center;
    }

        .ai-assist-banner h2 {
            margin: 0;
        }

        .ai-assist-banner .e-icons:before {
            font-size: 40px;
        }

    .compose-view,
    .output-view {
        width: max(70%, 400px);
        border: 1px solid lightgray;
        padding: 15px;
        margin: 15px auto 20px;
        border-radius: 7px;
    }

    .custom-btn {
        width: 100%;
        border-radius: 50px;
        margin: 20px 0;
    }

    .e-dropdown-btn {
        border: none !important;
        box-shadow: none;
    }
    .e-aiassist-view .e-aiassist-footer .e-aiassist-send {
        bottom: 36% !important
    }
    @@media (max-width: 420px) {
        .container {
            flex-direction: column;
        }

        #left {
            width: 100%;
            height: 100vh;
        }

        #right {
            position: absolute;
            left: 0;
            width: 100% !important;
            height: 100vh;
            z-index: 1001;
        }

        #right.open {
            display: block;
        }
    }

</style>