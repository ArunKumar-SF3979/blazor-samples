@page "/ai-pdfviewer-2/smartfill"
@using Microsoft.JSInterop
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.SfPdfViewer;
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Pdf.Graphics;
@using Syncfusion.Pdf.Interactive;
@using Syncfusion.Pdf.Parsing;
@using System.IO;
@using System.Text;
@using BlazorDemos.Service
@inject AzureAIService semanticKernelAI
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IDisposable
@*End:Hidden*@

<SampleDescription>
    <p>
        This sample illustrates how the Syncfusion Blazor PDF Viewer, with the help of AI, can automatically fill form fields using the data provided by the user.
    </p>
    <p>To explore this and more Syncfusion Blazor Smart AI integrations locally, check out our <a target='_blank' href='https://github.com/syncfusion/smart-ai-samples/tree/master/blazor' aria-label="Navigate to explore the syncfusion Blazor AI Demos repository">GitHub repository</a>.</p>
</SampleDescription>

<ActionDescription>
    <p>
        The AI processes the input information to populate the relevant fields in the PDF form, improving efficiency and reducing manual entry errors. However, users may need to review and adjust the filled fields as needed.
    </p>
</ActionDescription>
@*Hidden:Lines*@
@{#if (SHOW_GIF_IMAGES)}
<img src="@NavigationManager.ToAbsoluteUri($" {SampleService.WebAssetsPath}images/smartcomponents/pdf-viewer/smart-fill.gif")" style="width:100%; height:100%;" />
@{#else}
@*End:Hidden*@
<div class="control-section">
    <div class="parent-container" @onclick="ParentElementOnClick">
        <div class="sample-header">
            @* App bar *@
            <SfAppBar CssClass="app-bar" ColorMode="AppBarColor.Dark">
                <span class="regular">Smart Fill</span>
                <AppBarSpacer></AppBarSpacer>
            </SfAppBar>

            <div class="sample-content">
                <div class="left-content" style="width:@(isMobileDevice?"100%":(isPopupVisible?"70%":"100%"))">
                    @* Spinner *@
                    <div class="spinner-container" style="display:@displayBlurContainer">
                        <SfSpinner Size="50" @bind-Visible="@isSpinnerVisible"></SfSpinner>
                    </div>

                    @* Custom Toolbar *@
                     <div style="display:none">
                        <SfUploader @ref="@uploadFiles" ID="UploadFiles" ShowFileList="false" AllowedExtensions=".pdf">
                            <UploaderEvents OnUploadStart="@FileUploadSelected" Created="CreatedHandler"></UploaderEvents>
                            <UploaderAsyncSettings SaveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Save" RemoveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Remove"></UploaderAsyncSettings>
                        </SfUploader>
                    </div>
                    <SfToolbar CssClass="custom-toolbar">
                        <ToolbarItems>
                            <ToolbarItem Text="Open File" PrefixIcon="e-icons e-folder-open" TabIndex="1" TooltipText="Open file" Id="pdfviewer_open" Align="ItemAlign.Left" CssClass="e-pv-open-document-container"></ToolbarItem>
                            <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                            <ToolbarItem OnClick="@Download" TabIndex="1" Text="Save" PrefixIcon="e-icons e-download" Id="download" TooltipText="Download" Align=@ItemAlign.Left></ToolbarItem>
                            <ToolbarItem OnClick="@Print" TabIndex="2" TooltipText="Print File" PrefixIcon="e-icons e-print" Text="Print" CssClass="e-pv-print-container"></ToolbarItem>
                            @if (isDocumentLoaded)
                            {
                                <ToolbarItem Disabled="@isSpinnerVisible" OnClick="@ShowHidePopup" CssClass="@(isPopupVisible ? "smart-fill-btn" : "")" TabIndex="3" Text="Smart Fill" PrefixIcon="e-icons e-redaction" TooltipText="Smart Redact" Align="ItemAlign.Right"></ToolbarItem>
                            }
                        </ToolbarItems>
                    </SfToolbar>

                    @* Pdf Viewer 2 *@
                    <SfPdfViewer2 @ref="sfPdfViewer2" DocumentPath="@documentPath" Width="100%" EnableToolbar="false" EnableAnnotationToolbar="false" DownloadFileName="SmartFill.pdf">
                        <PdfViewerEvents DocumentLoaded="DocumentLoaded"></PdfViewerEvents>
                        <PdfViewerContextMenuSettings ContextMenuItems="contextMenuItems"></PdfViewerContextMenuSettings>
                    </SfPdfViewer2>
                </div>
                 @if (isPopupVisible)
                {
                    @* Smart Fill Container *@
                    <div class="right-content" style="width:@(isMobileDevice?"70%":(isPopupVisible?"30%":"0%"))">
                       <div class="smart-fill-container">
                           <div class="header">
                                <h6>Choose From Templates</h6>
                           </div>
                            <SfDropDownList TValue="string" TItem="UserData" PopupHeight="230px" DataSource="@userDetails" @bind-Value="@selectedValue">
                                <DropDownListFieldSettings Text="Text" Value="Value" />
                                <DropDownListEvents TItem="UserData" TValue="string" ValueChange="OnChange" />
                            </SfDropDownList>

                            <SfTextArea CssClass="e-outline" RowCount="10" ColumnCount="150" FloatLabelType="FloatLabelType.Auto" @bind-Value="@textBoxvalue"></SfTextArea>

                            <SfButton Content="Fill Form" CssClass="apply-btn" IsPrimary="true" OnClick="SmartFillClicked"></SfButton>
                       </div>
                    </div>
                }
            </div>
        </div>
    
    </div>
</div>
@*Hidden:Lines*@
@{#endif}
@*End:Hidden*@

@code{
    #region Properties
    private SfPdfViewer2? sfPdfViewer2;
    private SfUploader? uploadFiles;
    private string documentPath = "wwwroot/data/pdfviewer2/smartcomponents/form_document_1.pdf";
    private MemoryStream documentStream = new MemoryStream();
    private bool isPopupVisible = false;
    private bool isDocumentLoaded = false;
    private bool isSpinnerVisible = false;
    private bool isMobileDevice = false;
    private bool canRefreshContainer = false;
    private string displayBlurContainer => isSpinnerVisible ? "block" : "none";
    private List<ContextMenuItem> contextMenuItems = new List<ContextMenuItem>() { ContextMenuItem.Delete };
    public class UserData
    {
        public int ID { get; set; }
        public string Text { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
    }
    private const string defaultText = "Hi, this is Alice. You can contact me at alice456@gmail.com. I am female, born on July 15, 1998. I want to unsubscribe from a newspaper and learn courses, specifically a Cloud Computing course. I am from Texas.";
    private List<UserData> userDetails = new List<UserData>()
    {
        new UserData(){ ID = 1, Text = "User Registration Form", Value = defaultText },
        new UserData(){ ID = 2, Text = "Job Application Form", Value = "Hello, my name is John Paul, and I'm interested in applying for the Coach position. I'm currently self-employed, and you can contact me at johnpaul2209@gmail.com. For reference, please use my designated email: john123@gmail.com." },
        new UserData(){ ID = 3, Text = "Contact Form", Value = "Hello, My name is Peter Parker. You can contact me at peterparker03@gmail.com or on my personal number, 9876543210. I'm writing to request the blocking of my credit card, which has unfortunately been lost."}
    };
    private string selectedValue = defaultText;
    private string textBoxvalue { get; set; } = defaultText;

    //Will be called when the dropdown option is changed
    private void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, UserData> args)
    {
        this.textBoxvalue = args.ItemData.Value;
        if (args.ItemData.ID == 1)
        {
            documentPath = "wwwroot/data/pdfviewer2/smartcomponents/form_document_1.pdf";
        }
        else if (args.ItemData.ID == 2)
        {
            documentPath = "wwwroot/data/pdfviewer2/smartcomponents/form_document_2.pdf";
        }
        else if (args.ItemData.ID == 3)
        {
            documentPath = "wwwroot/data/pdfviewer2/smartcomponents/form_document_3.pdf";
        }
    }
    #endregion

    #region Smart Fill Click methods
    private async Task SmartFillClicked()
    {
        this.isSpinnerVisible = true;

        // Read XFDF content from PDF Viewer as String to provide input to OpenAI
        string inputFileContentAsString = await GetXFDFAsString(); 
        // Generates a string with custom data for each form field in a PDF viewer
        string CustomValues = await HintValuesforFieldsAsString();

        string mergePrompt = $"Merge the input data into the XFDF file content. Hint text: {CustomValues}. " +
                             $"Ensure the input data matches suitable field names. " +
                             $"Here are the details: " +
                             $"input data: {this.textBoxvalue}, " +
                             $"XFDF information: {inputFileContentAsString}. " +
                             $"Provide the resultant XFDF content directly, without any additional text, code blocks, or formatting markers like ```xml or ```." +
                             $"Some conditions need to be followed: " +
                             $"1. Input data is not directly provided as the field name; you need to think and merge appropriately. " +
                             $"2. When comparing input data and field names, ignore case sensitivity. " +
                             $"3. First, determine the best match for the field name. If there isn’t an exact match, use the input data to find a close match. " +
                             $"4. If the input data has the value of a checkbox field, change the value of the checkbox field to ON and other fields should be OFF.";
       
        // Reuest to AI
        string resultantXfdfFile = await semanticKernelAI.GetCompletionAsync(mergePrompt,false);
        // Convert the string directly to a MemoryStream
        using (MemoryStream inputFileStream = new MemoryStream(Encoding.UTF8.GetBytes(resultantXfdfFile)))
        {
            // Import the form field data as XFDF
            if (sfPdfViewer2 != null)
            {
                await sfPdfViewer2.ImportFormFieldsAsync(inputFileStream, FormFieldDataFormat.Xfdf);
            }
        }
        this.isSpinnerVisible = false;
    }

    // Method to read XFDF content from the PDF viewer and return it as a string
    private async Task<string> GetXFDFAsString()
    {
        MemoryStream stream = new MemoryStream();
        if (sfPdfViewer2 != null)
        {
            stream = (MemoryStream) await sfPdfViewer2.ExportFormFieldsAsync(FormFieldDataFormat.Xfdf);
            using (stream)
            {
                if (stream != null)
                {
                    using (StreamReader reader = new StreamReader(stream)) // Create a StreamReader to read from the stream
                    {
                        return reader.ReadToEnd(); // Read the stream content to the end and return as string
                    }
                }
                else
                {
                    return "";
                }
            }
        }
        return "";
    }

    // This method generates a string with custom data for each form field in a PDF viewer
    private async Task<string> HintValuesforFieldsAsString()
    {
        //Load the PDF document.
        if (sfPdfViewer2 != null)
        {
            byte[] bytes = await sfPdfViewer2.GetDocumentAsync();
            documentStream = new MemoryStream(bytes);
            PdfLoadedDocument doc = new PdfLoadedDocument(documentStream);
            //Gets the loaded form.
            PdfLoadedForm form = doc.Form;
            PdfLoadedFormFieldCollection formFields = form.Fields;

            string hintData = string.Empty;

            foreach (var field in formFields)
            {

                if (field is PdfLoadedListBoxField listBox)
                {
                    // Append ListBox name and items to the hintData string
                    hintData += "\n" + listBox.Name + " : Collection of Items are :";
                    PdfLoadedListItemCollection options = listBox.Values;
                    foreach (PdfLoadedListItem option in options)
                    {
                        hintData += option.Text + ", ";
                    }
                }
                else if (field is PdfLoadedComboBoxField comboBox)
                {
                    // Append comboBox name and items to the hintData string
                    hintData += "\n" + comboBox.Name + " : Collection of Items are :";
                    PdfLoadedListItemCollection options = comboBox.Values;
                    foreach (PdfLoadedListItem option in options)
                    {
                        hintData += option.Text + ", ";
                    }
                }
                else if (field is PdfLoadedRadioButtonListField radio)
                {
                    // Append radioButton name and items to the hintData string
                    hintData += "\n" + radio.Name + " : Collection of Items are :";
                    PdfLoadedRadioButtonItemCollection options = radio.Items;
                    foreach (PdfLoadedRadioButtonItem option in options)
                    {
                        hintData += option.Value + ", ";
                    }
                }
                else if (field is PdfLoadedCheckBoxField checkbox)
                {
                    try
                    {
                        string value = checkbox.GetValue("ExportValue");
                        // Append CheckBox Button name and value to the hintData string
                        hintData += "\n" + checkbox.Name + " : and the corresponding value is :" + value;
                    }
                    catch (Exception ex)
                    {
                        //throw ex;
                    }
                }
                // Check if the form field name contains 'Date', 'dob', or 'date'
                else if (field is PdfLoadedTextBoxField dob)
                {
                    if (dob.Name.Contains("Date") || dob.Name.Contains("dob") || dob.Name.Contains("date"))
                    {
                        // Append instructions for date format to the hintData string
                        hintData += "\n" + dob.Name + " : Write Date in MM/dd/YYYY format";
                    }
                }

            }
            // Return the hintData string if not null, otherwise return an empty string
            if (!string.IsNullOrEmpty(hintData))
            {
                return hintData;
            }
            else
            {
                return "";
            }
        }
        return "";
    }
    #endregion

    #region Parent Element Click Event
    private async void ParentElementOnClick(MouseEventArgs args)
    {
        try
        {
            if (isMobileDevice)
            {
                var result = await JsRuntime.InvokeAsync<bool>("checkClickedDiv");
                if (result)
                {
                    isPopupVisible = false;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
    #endregion

    #region Life Cycle methods
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isMobileDevice = await JsRuntime.InvokeAsync<bool>("isMobileDevice", false);
        }
        await base.OnAfterRenderAsync(firstRender);

        if (canRefreshContainer && sfPdfViewer2 != null)
        {
            await sfPdfViewer2.UpdateViewerContainerAsync();
            canRefreshContainer = false;
        }
    }
    #endregion

    #region Toolbar click methods
    private async Task CreatedHandler()
    {
        await JsRuntime.InvokeVoidAsync("created");
    }
    private async Task FileUploadSelected(UploadingEventArgs args)
    {
        if (args.FileData.Type == "pdf" && sfPdfViewer2 != null && uploadFiles != null)
        {
            string base64string = args.FileData.RawFile?.ToString();
            //Loads the PDF docuent from the given base64 string in the SfPdfViewer.
            await sfPdfViewer2.LoadAsync(base64string, null);
            await uploadFiles.ClearAllAsync();
        }
    }
    private async void Download()
    {
        if (sfPdfViewer2 != null)
        {
            //Downloads the PDF document being loaded in the PDFViewer2.
            await sfPdfViewer2.DownloadAsync();
        }
    }
    private async void Print()
    {
        if (sfPdfViewer2 != null)
        {
            //Print the PDF document being loaded in the PDFViewer2.
            await sfPdfViewer2.PrintAsync();
        }
    }
    #endregion
    private void ShowHidePopup()
    {
        isPopupVisible = !isPopupVisible;
        canRefreshContainer = true;
    }

    private void DocumentLoaded(LoadEventArgs args)
    {
        isDocumentLoaded = true;
    }

    public void Dispose()
    {
        isDocumentLoaded = false;
        isPopupVisible = false;
        documentStream?.Dispose();
        contextMenuItems?.Clear();
        userDetails?.Clear();
    }
}

<style>
    .parent-container {
        width: 100%;
        height: 580px;
        display: flex;
        flex-direction: column;
        font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    }

    .left-content {
        width: 100%;
        /* height: 90vh; */
    }
    .right-content {
        /* height:94.5vh; */
        background-color: #ffff;
        position:absolute;
        top:68px;
        right: 0;
        z-index:1001
    }
    .smart-fill-container{
        padding:4%
    }
    .e-toolbar{
        border-width: 1px !important
    }

    .header {
        padding-bottom: 3%
    }
    .apply-btn {
        position: absolute;
        right: 30px;
        top: 285px;
    }

    .custom-toolbar.e-toolbar .e-toolbar-item.smart-fill-btn .e-tbar-btn {
        background: #5c636a;
        border-color: #6c757d;
        border-style: solid;
        border-width: 0;
        border-radius: 4px;
        color: #fff;
    }

    .custom-toolbar.e-toolbar .e-toolbar-item.smart-fill-btn .e-tbar-btn .e-icons {
        color: #fff;
    }

    .custom-toolbar.e-toolbar .e-toolbar-item.smart-fill-btn .e-tbar-btn .e-tbar-btn-text {
        color: #fff;
    }

    .spinner-container {
        height: 94.5vh;
        width: inherit;
        position: absolute;
        top: 48px;
        left: 0;
        bottom: 0;
        background-color: black;
        opacity: 0.3;
        z-index: 99999
    }
    /*for mobiles*/
    @@media only screen and (max-width: 768px) {
        .e-toolbar .e-toolbar-item .e-tbar-btn .e-tbar-btn-text {
            display: none
        }
    }
    /*for desktop*/
    @@media only screen and (min-width: 1024px) {
        .apply-btn {
            width: 20%;
        }
    }
</style>