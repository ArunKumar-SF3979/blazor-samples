@page "/ai-treegrid/adaptive-datastructuring"

@inject AzureAIService OpenAIService
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using System.Text.Json;
@using BlazorDemos.Service

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@*End:Hidden*@

<SampleDescription>
    <p>
        This demo highlights the use of AI to structure and correct erroneous hierarchical data within a Tree Grid. The AI-powered prompt identifies and organizes data items into a hierarchical format by accurately establishing parent-child relationships, ensuring the data is properly nested and ready for display in the Tree Grid component.
    </p>
    <p>To explore this and more Syncfusion Blazor Smart AI integrations locally, check out our <a target='_blank' href='https://github.com/syncfusion/smart-ai-samples/tree/master/blazor' aria-label="Navigate to explore the syncfusion Blazor AI Demos repository">GitHub repository</a>.</p>
</SampleDescription>

<ActionDescription>
    <p>
        Utilizing a specialized AI prompt, the system scans a dataset to identify and restructure hierarchical relationships between records. The AI meticulously corrects any misassigned relationships by adjusting the ParentId fields, aligning them with their respective top-level CategoryId. The resulting dataset, now properly organized, is then bound to the Tree Grid for a coherent and accurate display.
    </p>
</ActionDescription>

@*Hidden:Lines*@
@{#if (SHOW_GIF_IMAGES)}
<img src="@NavigationManager.ToAbsoluteUri($" {SampleService.WebAssetsPath}images/smartcomponents/treegrid/adaptive-datastructuring.gif")" style="width:100%; height:100%;" />

@{#else}
@*End:Hidden*@
<div style="padding-bottom: 10px;">
    <span>@message</span>
</div>
<div>
    <SfTreeGrid @ref="TreeGrid" DataSource="@TreeGridData" IdMapping="CategoryId" ParentIdMapping="ParentId" TreeColumnIndex="1">
    <TreeGridEditSettings AllowEditing="true"/>
        <TreeGridEvents TValue="TreeData.BusinessObject" OnToolbarClick="ToolBarClick"></TreeGridEvents>
    <TreeGridColumns>
        <TreeGridColumn Field="CategoryId" HeaderText="Category ID" IsPrimaryKey="true" Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
        <TreeGridColumn Field="CategoryName" HeaderText="Category Name" Width="150"></TreeGridColumn>
        <TreeGridColumn Field="Status" HeaderText="Status" Width="100"></TreeGridColumn>
        <TreeGridColumn Field="OrderDate" HeaderText="Last Order Date" Format="d" Width="120"></TreeGridColumn>
    </TreeGridColumns>
     <SfToolbar ID="TreeGrid_AISample_Toolbar">
            <ToolbarItems>
                <ToolbarItem>
                    <Template>
                        <SfButton IsPrimary ID="openAI" @onclick="OpenAIHandler">Smart Data Restructure</SfButton>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
</SfTreeGrid>
</div>
@*Hidden:Lines*@
@{#endif}
@*End:Hidden*@

@code {

    public SfTreeGrid<TreeData.BusinessObject> TreeGrid;
    private string AIPrompt = string.Empty;
    private string message = string.Empty;
    public List<TreeData.BusinessObject> TreeGridData { get; set; }
    protected override void OnInitialized()
    {
        this.TreeGridData = TreeData.GetAdaptiveStructureData().ToList();
    }

    public async Task ToolBarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Smart Data Restructure")
        {
            await OpenAIHandler();
        }
    }

    private async Task OpenAIHandler()
    {
        await TreeGrid.ShowSpinnerAsync();
        List<TreeData.BusinessObject> sortedCollection = new List<TreeData.BusinessObject>();
        var AIPrompt = GeneratePrompt(TreeGridData);
        string result = await OpenAIService.GetCompletionAsync(AIPrompt);
        if (result.StartsWith("```json"))
        {
            result = result.Replace("```json", "").Replace("```", "").Trim();
        }
        else if (result.StartsWith("```"))
        {
            result = result.Replace("```", "").Replace("```", "").Trim();
        }

        string response = JsonDocument.Parse(result).RootElement.GetProperty("TreeGridData").ToString();
        if (response is not null)
        {
            sortedCollection = JsonSerializer.Deserialize<List<TreeData.BusinessObject>>(response);
        }       
        if(sortedCollection is not null && sortedCollection.Count > 0)
        {
            TreeGridData = sortedCollection.Cast<TreeData.BusinessObject>().ToList();
        }
        else
        {
            message = "Oops.! Please try Again !";
        }
        await TreeGrid.HideSpinnerAsync();
        await Task.CompletedTask;
    }

    private string GeneratePrompt(List<TreeData.BusinessObject> TreeGridData)
    {
        Dictionary<string, IEnumerable<object>> treeData = new Dictionary<string, IEnumerable<object>>();
        treeData.Add("TreeGridData", TreeGridData);
        var jsonData = JsonSerializer.Serialize(treeData);
        return @"I want you to act as a TreeGrid Data Organizer.
            Your task is to organize a dataset based on a hierarchical structure using 'CategoryId' and 'ParentId'.
            Each item in the dataset has a 'CategoryName' representing categories, and some categories have a null 'ParentId', indicating they are top-level categories. 
            Your role will be to meticulously scan the entire dataset to identify related items based on their 'CategoryName' values and nest them under the appropriate top-level categories by updating their 'ParentId' to match the 'CategoryId' of the corresponding top-level category.
            For example, if a category like 'Furniture' exists, you should scan the dataset for items such as 'Chair' and 'Table' and update their 'ParentId' to the 'CategoryId' of 'Furniture'.
            The output should be the newly prepared TreeGridData with correctly assigned 'ParentId' values. Please ensure that all subcategories are correctly nested under their respective top-level categories .
            Return the newly prepared TreeGridData alone and don't share any other information with the response: Here is the dataset " + jsonData + "/n Note: Return response must be in json string and with no other explanation. ";
    }
}