@page "/ai-filemanager/smart-filemanager"

@using FileManagerAI.Services
@using Syncfusion.Blazor.FileManager
@using Syncfusion.Blazor.Popups
@using System;
@using System.IO;
@using System.Text;
@using System.Threading.Tasks;
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Pdf;
@using Syncfusion.Pdf.Graphics;
@using Syncfusion.Pdf.Grid;
@using Syncfusion.Drawing;
@using Syncfusion.Pdf.Parsing;
@using System.Text.RegularExpressions;
@using Syncfusion.DocIO;
@using Syncfusion.DocIO.DLS;
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.Buttons;
@using BlazorDemos.Service;
@inject FileManagerService FileManagerService

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@*End:Hidden*@

<SampleDescription>
    <p>This demo showcases the advanced capabilities of the Syncfusion Blazor File Manager, including:</p>
        <ul>
        <li><strong>Smart Search:</strong> Users can search for items based on semantic meaning, allowing them to find relevant files even if the search term does not exactly match the file name. To perform a smart search, provide a semantic content in the File Manager search bar and click the search icon or press the <kbd>Enter</kbd>.</li>
        <li><strong>Content Summary:</strong> Users can quickly get summaries of .txt, .pdf, and .docx files by selecting a file and clicking the "Quick Summary" button in the File Manager Toolbar.</li>
        <li><strong>Intelligent Organization:</strong> Users can organize files into categories using AI by selecting a folder and clicking the "Organize" button in the File Manager context menu.</li>
    </ul>
    <p>These features enhance file management by making search more intuitive, document overview faster, and organization smarter.</p>
</SampleDescription>

<ActionDescription>
    <p><strong>Smart Search:</strong> This feature uses local embeddings to match search terms with relevant files. The search term is compared with stored data to show only relevant items based on semantic similarity.</p>
    <p><strong>Content Summary:</strong> This feature extracts and summarizes file content using AI. Users can access it via the "Quick Summary" button, which generates a concise overview of the file's content.</p>
    <p><strong>Intelligent Organization:</strong> This feature categorizes and sorts files within selected folders based on AI analysis of file names and metadata. It organizes the files into logical groups, making it easier to manage and locate documents.</p>
</ActionDescription>

<br />
@*Hidden:Lines*@
@{#if (SHOW_GIF_IMAGES)}
<img src="@NavigationManager.ToAbsoluteUri($" {SampleService.WebAssetsPath}images/smartcomponents/filemanager/smart-filemanager.gif")" style="width:100%; height:100%;" />
@{#else}
@*End:Hidden*@
<div class="container">
    <div class="file-manager">
        <SfFileManager TValue="FileManagerDirectoryContent" ID="@FileManagerId" @ref="FileManager" Height="500px" ShowTooltip="false">
            <FileManagerSearchSettings AllowSearchOnTyping=false></FileManagerSearchSettings>
            <FileManagerToolbarSettings ToolbarItems="@Items"></FileManagerToolbarSettings>
            <FileManagerContextMenuSettings File="@FileItems" Folder="@FolderItems"></FileManagerContextMenuSettings>
            <FileManagerEvents TValue="FileManagerDirectoryContent" OnRead="OnReadAsync" ItemsDeleting="ItemsDeletingAsync" FolderCreating="FolderCreatingAsync" Searching="SearchingAsync" ItemRenaming="ItemRenamingAsync" ItemsMoving="ItemsMovingAsync" ItemsUploaded="ItemsUploadedAsync" BeforeDownload="BeforeDownload" BeforeImageLoad="BeforeImageLoadAsync" OnFileOpen="OnFileOpen" MenuOpened="MenuOpened" OnMenuClick="OnMenuClick" FileSelected="FileSelected" ToolbarItemClicked="ToolbarItemClicked"></FileManagerEvents>
            <div id="FileManagerSpinner">
                <SfSpinner @bind-Visible="@VisibleProperty" ZIndex="1006">
                </SfSpinner>
            </div>
        </SfFileManager>
    </div>
</div>
<div>
    <SfDialog ID="Summary" Width="600" Height="90%" ZIndex="1000" EnableResize="true" AllowDragging="true" IsModal=true ShowCloseIcon="true" @bind-Visible="@IsDialogVisible" Target=@("#"+FileManagerId)>
        <DialogTemplates>
            <Header>@DialogTitle</Header>
            <Content>
                <div class="Summary-Dialog">
                    @if (!isContentGenerating)
                    {
                        @((MarkupString)DialogContent)
                    }
                    else
                    {
                        <SfSkeleton CssClass="skeletonRectangle" Shape=SkeletonType.Rectangle Width="100%" Height="20px"></SfSkeleton>
                        <SfSkeleton CssClass="skeletonRectangle" Shape=SkeletonType.Rectangle Width="80%" Height="20px"></SfSkeleton>
                        <SfSkeleton CssClass="skeletonRectangle" Shape=SkeletonType.Rectangle Width="70%" Height="20px"></SfSkeleton>
                        <SfSkeleton CssClass="skeletonRectangle" Shape=SkeletonType.Rectangle Width="50%" Height="20px"></SfSkeleton>
                    }
                </div>
            </Content>
        </DialogTemplates>
        <DialogEvents OnOverlayModalClick="DialogOverlay" OnClose="OnClose" />
    </SfDialog>
</div>
<br />
<br />
<br />
@*Hidden:Lines*@
@{#endif}
@*End:Hidden*@
@code {
    SfFileManager<FileManagerDirectoryContent>? FileManager;
    private bool VisibleProperty { get; set; } = false;
    private string FileManagerId { get; set; } = Guid.NewGuid().ToString();
    private string DialogTitle { get; set; } = "File Summary";
    private bool IsDialogVisible { get; set; } = false;
    private bool isContentGenerating { get; set; }
    private string selectedOption = "Open AI";
    private string promptQuery = string.Empty;
    private string DialogContent = string.Empty;
    private static readonly HashSet<string> AllowedFileTypes = new HashSet<string>
    {
        ".txt",
        ".docx",
        ".pdf"
    };
    public List<ToolBarItemModel> Items = new List<ToolBarItemModel>(){
        new ToolBarItemModel() { Name = "NewFolder" },
        new ToolBarItemModel() { Name = "Cut" },
        new ToolBarItemModel() { Name = "Copy" },
        new ToolBarItemModel() { Name = "Paste" },
        new ToolBarItemModel() { Name = "Delete" },
        new ToolBarItemModel() { Name = "Download" },
        new ToolBarItemModel() { Name = "Rename" },
        new ToolBarItemModel() { Name = "SortBy" },
        new ToolBarItemModel() { Name = "Refresh" },
        new ToolBarItemModel() { Name = "Organize", Text="Organize", TooltipText="Organize", PrefixIcon="e-icons e-folder", Visible=false },
        new ToolBarItemModel() { Name = "Quick Summary", Text="Quick Summary", TooltipText="Get a quick summary of the selected file using AI", PrefixIcon="e-icons e-print-layout", Visible=false },
        new ToolBarItemModel() { Name = "Selection" },
        new ToolBarItemModel() { Name = "View" },
        new ToolBarItemModel() { Name = "Details" },
    };

    public string[] FileItems = new string[] { "Cut", "Copy", "|", "Delete", "Rename", "|", "Details" };
    public string[] FolderItems = new string[] { "Organize", "|", "Open", "|", "Cut", "Copy", "Paste", "|", "Delete", "Rename", "|", "Details" };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _ = Task.Run(() => FileManagerService.EmbedInitialFiles());
    }

    public async Task OnReadAsync(ReadEventArgs<FileManagerDirectoryContent> args)
    {
        if (!Directory.Exists(Path.Combine(FileManagerService.DemoBaseDirectory, FileManagerId)))
        {
            FileManagerService.RootFolder(FileManagerId);
        }
        args.Response = await FileManagerService.GetFiles(args.Path, false, args.Folder.ToArray());
    }

    public async Task ItemsDeletingAsync(ItemsDeleteEventArgs<FileManagerDirectoryContent> args)
    {
        string[] names = args.Files.Select(x => x.Name).ToArray();
        args.Response = await FileManagerService.Delete(args.Path, names, args.Files.ToArray());
    }

    public async Task FolderCreatingAsync(FolderCreateEventArgs<FileManagerDirectoryContent> args)
    {
        args.Response = await FileManagerService.Create(args.Path, args.FolderName, args.ParentFolder);
    }

    public async Task SearchingAsync(SearchEventArgs<FileManagerDirectoryContent> args)
    {
        args.Response = await FileManagerService.Search(args.Path, args.SearchText, false, false);
    }

    public async Task ItemRenamingAsync(ItemRenameEventArgs<FileManagerDirectoryContent> args)
    {
        args.Response = await FileManagerService.Rename(args.Path, args.File.Name, args.NewName, false, args.ShowFileExtension, args.File);
    }

    public async Task ItemsMovingAsync(ItemsMoveEventArgs<FileManagerDirectoryContent> args)
    {
        string[] names = args.Files.Select(x => x.Name).ToArray();
        if (args.IsCopy)
        {
            args.Response = await FileManagerService.Copy(args.Path, args.TargetPath, names, args.TargetData, args.Files.ToArray());
        }
        else
        {
            args.Response = await FileManagerService.Move(args.Path, args.TargetPath, names, args.TargetData, args.Files.ToArray());
        }
    }

    public async Task ItemsUploadedAsync(ItemsUploadedEventArgs<FileManagerDirectoryContent> args)
    {
        string currentPath = args.Path;
        try
        {
            foreach (var file in args.Files)
            {
                var folders = (file.FileInfo.Name).Split('/');
                if (folders.Length > 1)
                {
                    for (var i = 0; i < folders.Length - 1; i++)
                    {
                        string newDirectoryPath = Path.Combine(FileManagerService.basePath + currentPath, folders[i]);
                        if (Path.GetFullPath(newDirectoryPath) != (Path.GetDirectoryName(newDirectoryPath) + Path.DirectorySeparatorChar + folders[i]))
                        {
                            throw new UnauthorizedAccessException("Access denied for Directory-traversal");
                        }
                        if (!Directory.Exists(newDirectoryPath))
                        {
                            await FileManagerService.Create(currentPath, folders[i]);
                        }
                        currentPath += folders[i] + "/";
                    }
                }
                var fullName = Path.Combine((FileManagerService.contentRootPath + currentPath), file.File.Name);
                using (var filestream = new FileStream(fullName, FileMode.Create, FileAccess.Write))
                {
                    await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task BeforeImageLoadAsync(BeforeImageLoadEventArgs<FileManagerDirectoryContent> args)
    {
        string root = FileManagerService.DemoDirectoryName + "\\" + FileManagerId + "\\" + "Files";
        string relativePath = ($"{root + args.FileDetails.FilterPath + args.FileDetails.Name}").Replace("\\", "/");
        args.ImageUrl = NavigationManager.ToAbsoluteUri(relativePath).ToString();
    }

    public void BeforeDownload(BeforeDownloadEventArgs<FileManagerDirectoryContent> args)
    {
        var downloadData = FileManagerService.Download(args.DownloadData.Path, args.DownloadData.Names, args.DownloadData.DownloadFileDetails.ToArray());
        args.FileStream = downloadData.FileStream;
        args.DownloadFileName = downloadData.FileDownloadName;
    }

    private void FileSelected(FileSelectEventArgs<FileManagerDirectoryContent> args)
    {
        if (AllowedFileTypes.Contains(args.FileDetails.Type) && FileManager?.SelectedItems.Length == 1)
        {
            Items.Where(item => item.Name == "Quick Summary").FirstOrDefault().Visible = true;
        }
        else if (!args.FileDetails.IsFile && FileManager.SelectedItems.Length == 1)
        {
            Items.Where(item => item.Name == "Organize").FirstOrDefault().Visible = true;
        }
        else
        {
            Items.Where(item => item.Name == "Organize").FirstOrDefault().Visible = false;
            Items.Where(item => item.Name == "Quick Summary").FirstOrDefault().Visible = false;
        }
    }

    private async Task ToolbarItemClicked(ToolbarClickEventArgs<FileManagerDirectoryContent> args)
    {
        if (args.Item.Text == "Quick Summary")
        {
            if (args.FileDetails[0].Permission == null)
            {
                await SummarizeAsync(args.FileDetails[0].IsFile, args.FileDetails[0].Type, args.FileDetails[0].FilterPath, args.FileDetails[0].Name);
            }
            else if (args.FileDetails[0].Permission != null && !args.FileDetails[0].Permission.Read)
            {
                this.IsDialogVisible = true;
                this.DialogContent = args.FileDetails[0].Name + " is not accessible. You do not have permission to read this file.";
            }
        }
    }

    private async Task OnMenuClick(MenuClickEventArgs<FileManagerDirectoryContent> args)
    {
        if (args.Item.Text == "Organize")
        {
            VisibleProperty = true;
            string path = FileManager?.Path + FileManager?.SelectedItems[0] + "/";
            bool showHiddenItems = args.FileDetails[0].ShowHiddenItems;
            await FileManagerService.OrganizeFiles(path, showHiddenItems, args.FileDetails.ToArray());
            VisibleProperty = false;
            await FileManager.OpenFileAsync(args.FileDetails[0].Name);
        }
    }

    private void MenuOpened(MenuOpenEventArgs<FileManagerDirectoryContent> args)
    {
        if (FileManager?.SelectedItems.Length == 0 || FileManager?.SelectedItems.Length > 1)
        {
            FileManager?.DisableMenuItems(new string[] { "Organize" });
        }
        for (int i = 0; i < args.Items.Count(); i++)
        {
            if (args.Items[i].Id == FileManager?.ID + "_cm_organize")
            {
                args.Items[i].IconCss = "e-icons e-folder";
            }
        }
    }

    public async Task OnFileOpen(FileOpenEventArgs<FileManagerDirectoryContent> args)
    {
        if (args.FileDetails != null && args.FileDetails.IsFile && AllowedFileTypes.Contains(args.FileDetails.Type))
        {
            if (args.FileDetails.Permission == null)
            {
                await SummarizeAsync(args.FileDetails.IsFile, args.FileDetails.Type, args.FileDetails.FilterPath, args.FileDetails.Name);
            }
            else if (args.FileDetails.Permission != null && !args.FileDetails.Permission.Read)
            {
                this.IsDialogVisible = true;
                this.DialogContent = args.FileDetails.Name + " is not accessible. You do not have permission to read this file.";
            }
        }
        else
        {
            this.IsDialogVisible = false;
        }
    }
    public async Task SummarizeAsync(bool isFile, string type, string filterPath, string name)
    {
        if (!isFile || string.IsNullOrEmpty(filterPath) || string.IsNullOrEmpty(name))
        {
            this.DialogContent = "Invalid file or path.";
            this.IsDialogVisible = false;
            this.isContentGenerating = false;
            StateHasChanged();
            return;
        }

        this.IsDialogVisible = true;
        this.isContentGenerating = true;

        string filePath = $"wwwroot\\Files{filterPath}{name}";
        string fileContent = ExtractTextFromFile(filePath);

        if (string.IsNullOrEmpty(fileContent) || selectedOption != "Open AI")
        {
            this.DialogContent = "Please provide a proper file content to summarize.";
            this.isContentGenerating = false;
            StateHasChanged();
            return;
        }

        string promptQuery = "You are a helpful assistant. Your task is to analyze the provided text and generate a short summary. Provide the summary with highlighted topics in ordered list HTML format and it should be ready for execution :\n\n Do not provide codeblock prefixes or introductory texts such as ``` or html, etc.";
        string query = promptQuery + fileContent;
        
        string finalSummary = await FileManagerService.OpenAIService.GetCompletionAsync(query, false);

        this.DialogContent = !string.IsNullOrEmpty(finalSummary) ? finalSummary : "Please provide a proper file content to summarize.";
        this.isContentGenerating = false;
        StateHasChanged();
    }

    public void OnClose(BeforeCloseEventArgs args)
    {
        this.DialogContent = "";
        this.IsDialogVisible = false;
    }

    private void DialogOverlay()
    {
        this.IsDialogVisible = false;
    }


    private string ExtractTextFromFile(string filePath)
    {
        string text = string.Empty;
        string extension = Path.GetExtension(filePath).ToLower();
        if (extension == ".txt")
        {
            text = File.ReadAllText(filePath);
        }
        else if (extension == ".docx")
        {
            text = ExtractTextFromWord(filePath);
        }
        else if (extension == ".pdf")
        {
            text = ExtractTextFromPdf(filePath);
        }
        return text;
    }

    private string ExtractTextFromWord(string filePath)
    {
        StringBuilder textBuilder = new StringBuilder();
        using (FileStream sourceStreamPath = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
        {
            using (WordDocument document = new WordDocument(sourceStreamPath, FormatType.Docx))
            {
                string cleanedText = Regex.Replace(document.GetText(), @"[\r\n]+", "");
                cleanedText = Regex.Replace(cleanedText, @"\s{2,}", "");
                textBuilder.Append(cleanedText);
            }
        }
        return textBuilder.ToString();
    }

    private string ExtractTextFromPdf(string filePath)
    {
        List<string> extractedText = new List<string>();
        FileStream fileStream = new FileStream(filePath, System.IO.FileMode.Open, System.IO.FileAccess.Read);
        using (PdfLoadedDocument loadedDocument = new PdfLoadedDocument(fileStream))
        {
            PdfLoadedPageCollection loadedPages = loadedDocument.Pages;
            using (MemoryStream annotationStream = new MemoryStream())
            {
                loadedDocument.ExportAnnotations(annotationStream, AnnotationDataFormat.Json);
                string annotations = ConvertToString(annotationStream);
                if (!String.IsNullOrEmpty(annotations))
                {
                    extractedText.Add("Annotations: " + annotations);
                }
            }
            using (MemoryStream formStream = new MemoryStream())
            {
                if (loadedDocument.Form != null)
                {
                    loadedDocument.Form.ExportData(formStream, DataFormat.Json, "form");
                    string formFields = ConvertToString(formStream);
                    if (!String.IsNullOrEmpty(formFields))
                    {
                        extractedText.Add("Form fields: " + formFields);
                    }
                }
            }
            for (int i = 0; i < loadedPages.Count; i++)
            {
                string text = $"... Page {i + 1} ...\n";
                text += loadedPages[i].ExtractText();
                extractedText.Add(text);
            }
        }
        return String.Join(" ", extractedText.Take(10));
    }

    private string ConvertToString(MemoryStream memoryStream)
    {
        memoryStream.Position = 0;
        using (StreamReader reader = new StreamReader(memoryStream, Encoding.UTF8))
        {
            return reader.ReadToEnd();
        }
    }
}

<style>
    .Summary-Dialog {
        padding: 5px;
    }

    .container {
        display: flex;
        width: 100%;
    }

    .file-manager {
        flex: 1;
    }

    #FileManagerSpinner .e-spinner-inner {
        margin-top: 160px;
        margin-left: 216px;
    }

    .split-container {
        display: flex;
        padding-top: 10px
    }

    .split-left, .split-right {
        flex: 1;
        padding: 10px;
    }

    .flex-container {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .rich-label {
        font-size: 1.2em;
        color: #333;
        font-weight: bold;
    }

    .feature-description {
        border: 1px solid #d1d9e0;
        border-radius: 10px;
        padding: 5px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        font-family: Arial, sans-serif;
        margin: 20px 0;
    }

        .feature-description h4 {
            color: #2a3f54;
            font-size: 1.3em;
            margin-bottom: 15px;
        }

        .feature-description ul {
            list-style-type: disc;
            padding-left: 20px;
        }

        .feature-description li {
            color: #596775;
            font-size: 1em;
            line-height: 1.4;
            margin-bottom: 10px;
        }

            .feature-description li:last-of-type {
                margin-bottom: 0;
            }
</style>
