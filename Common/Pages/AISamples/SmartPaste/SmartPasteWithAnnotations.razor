@page "/ai-smartpaste/annotations"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SmartComponents
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.DropDowns
@using System.ComponentModel.DataAnnotations
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@*End:Hidden*@

<SampleDescription>
   <p>This sample demonstrates the usage of <code>data-smartpaste-description</code> in form fields to customize field descriptions. It shows how to provide specific descriptions for form fields, enhancing the Smart Paste feature's ability to automatically populate form data based on these custom descriptions.</p>

    <p>To explore this and more Syncfusion Blazor Smart AI integrations locally, check out our <a target='_blank' href='https://github.com/syncfusion/smart-ai-samples/tree/master/blazor' aria-label="Navigate to explore the syncfusion Blazor AI Demos repository">GitHub repository</a>.</p>
</SampleDescription>

<ActionDescription>
    <p>This sample uses the <code>data-smartpaste-description</code> attribute to customize field descriptions. By default, Smart Paste automatically identifies and describes form fields based on labels, names, or nearby text. You can override these descriptions by setting <code>data-smartpaste-description</code> for specific fields, which helps the backend model provide more accurate form auto-filling.</p>

</ActionDescription>

@*Hidden:Lines*@
@{#if (SHOW_GIF_IMAGES)}
<img src="@NavigationManager.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/smartcomponents/smartpaste/smartpaste-withannotations.gif")" style="width:100%; height:100%;"/>

@{#else}
@*End:Hidden*@
<div class="col-lg-8 control-section sb-property-border">
    <div class="control-wrapper">
        <SfDataForm ID="bugReport"
                    Model="@BugRptModel"
                    ColumnCount="2"
                    ColumnSpacing="20px"
                    ButtonsAlignment="FormButtonsAlignment.Right">
            <FormValidator>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidator>

            <FormItems>
                <FormItem Field="@nameof(BugRptModel.BugName)" ColumnSpan="2" Placeholder="What's the bug ?"></FormItem>
                <FormItem Field="@nameof(BugRptModel.Reporter)" ColumnSpan="1" Placeholder="">
                    <Template>
                        <label class="e-form-label">Reporter</label>
                        <SfTextBox HtmlAttributes="reporterNameAttr"
                                   @bind-Value="@BugRptModel.Reporter"
                                   Placeholder="Who is the reporter ?"
                                   name="reporter-name" />
                    </Template>
                </FormItem>
                <FormItem Field="@nameof(BugRptModel.SubmittedDate)" ColumnSpan="1">
                    <Template>
                        <label class="e-form-label">Submitted Date</label>
                        <SfTextBox HtmlAttributes="submittedDataAttr"
                                   @bind-Value="@BugRptModel.SubmittedDate"
                                   Placeholder="When it is reported ?"
                                   name="submitted-date" />
                    </Template>
                </FormItem>
                <FormItem Field="@nameof(BugRptModel.BugDescription)" ColumnSpan="2" EditorType="FormEditorType.TextArea" Placeholder="Describe a little about the bug." />
                <FormItem Field="@nameof(BugRptModel.ReproSteps)" ColumnSpan="2">
                    <Template>
                        <label class="e-form-label">Repro Steps</label>
                        <SfTextArea HtmlAttributes="reproStepsAttr"
                                    @bind-Value="@BugRptModel.ReproSteps"
                                    Placeholder="Enter the repro steps here.."
                                    RowCount="3" />
                    </Template>
                </FormItem>
                <FormItem Field="@nameof(BugRptModel.BugPriority)" ColumnSpan="2">
                    <Template>
                        <label class="e-form-label">Bug Priority</label>
                        <SfTextBox HtmlAttributes="bugPriorityAttr"
                                   @bind-Value="@BugRptModel.BugPriority"
                                   Placeholder="Priority of the bug"
                                   name="bug-priority" />
                    </Template>
                </FormItem>
            </FormItems>

            <FormButtons>
                <SfButton IconCss="e-icons e-reset" Content="Reset" OnClick="HandleFormReset"></SfButton>
                <SfSmartPasteButton Content="Smart Paste" IconCss="e-icons e-paste">
                </SfSmartPasteButton>
            </FormButtons>
        </SfDataForm>

    </div>
</div>

<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-content">
            <h4> Choose a preset below </h4>
            <div class="chip-container">
                @*Initialize the Choice Chips component*@
                <SfChip ID="chip-choice" Selection="SelectionType.Single" SelectedChips=@ChoiceSelected>
                    <ChipItems>
                        <ChipEvents OnClick="@HandlePresetChange"></ChipEvents>
                        @foreach (DataPreset bug in BugPresets)
                        {
                            <ChipItem Text="@bug.Text"></ChipItem>
                        }
                    </ChipItems>
                </SfChip>
            </div>
            <div class="bug-report">@currentBugReport</div>
            <SfButton IconCss=@copyBtnIcon Content="@copyBtnContent" OnClick="CopyToClipboard"></SfButton>
        </div>
    </div>
</div>
<style>
    .property-panel-content {
        margin: 20px 0px;
    }

    .property-panel-content .bug-report {
        padding: 10px;
        margin: 15px 0px;
        background-color: #f3f3f3;
        border: 1px solid #ddd;
        border-radius: 5px;
        line-height: 1.5;
    }

    .mobile .control-wrapper {
        max-width: 100%;
    }

    .control-wrapper {
        max-width: 470px;
        margin: 0 auto;
        padding: 0px 0px 0px;
    }

    .control-header {
        text-align: center;
    }
</style>
@*Hidden:Lines*@
@{#endif}
@*End:Hidden*@

@code {
    private BugReportModel BugRptModel = new BugReportModel();
    // Specfies the selected chips value in the Choice Chips.
    private string[] ChoiceSelected = { CommonData.BugPresets[0].Text };

    private string copyBtnContent = "Copy";
    private string copyBtnIcon = "e-icons e-copy";
    private int dropdownValue = 0;
    private string currentBugReport;

    private List<DataPreset> BugPresets => CommonData.BugPresets;
    private List<string> BugReports => CommonData.BugReports;

    Dictionary<string, object> reporterNameAttr = new Dictionary<string, object>()
    {
        { "data-smartpaste-description", "Name must follow the format: Initial Firstname Lastname" }
    };
    Dictionary<string, object> submittedDataAttr = new Dictionary<string, object>()
    {
        { "data-smartpaste-description", "Date must follow the format: Month Day. For ex: May 01" }
    };
    Dictionary<string, object> reproStepsAttr = new Dictionary<string, object>()
    {
        { "data-smartpaste-description", "Structure each steps in a Numbered format." },
        { "name", "repro-steps" }
    };
    Dictionary<string, object> bugPriorityAttr = new Dictionary<string, object>()
    {
        { "data-smartpaste-description", "Only allowed values are Low, Medium and High" }
    };

    protected override void OnInitialized()
    {
        currentBugReport = BugReports[0];
    }

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", currentBugReport);
        copyBtnContent = "Copied";
        copyBtnIcon = "e-icons e-check";
    }

    private void HandleFormReset()
    {
        BugRptModel = new BugReportModel();
    }

    private void HandlePresetChange(ChipEventArgs args)
    {
        currentBugReport = BugReports[args.Index];
        ChoiceSelected[0] = args.Text;
        copyBtnContent = "Copy";
        copyBtnIcon = "e-icons e-copy";
        StateHasChanged();
    }
}