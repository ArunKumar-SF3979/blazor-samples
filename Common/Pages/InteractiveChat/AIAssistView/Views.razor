@page "/ai-assistview/custom-views"
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.InteractiveChat
@using Syncfusion.Blazor.Buttons
@using System.Text.RegularExpressions;
@inject IJSRuntime JSRuntime

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager

@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the different view available for the AI AssistView component.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, the AI AssistView component is configured with three distinct views using the <code>views</code> property.</p>
    <p>
        Each view displays its own unique content:
        <ul>
            <li>The <code>prompt</code> view includes a textarea with a <code>Generate</code> button and displays a list of suggestions</li>
            <li>The <code>response</code> view shows the generated response with a copy option.</li>
            <li>The <code>custom</code> view allows to display the custom content.</li>
        </ul>
    </p>
</ActionDescription>

<div class="control-section">
    <div class="views-aiassistview">
        <SfAIAssistView ID="aiAssistView" @ref="AIAssistView">
            <ChildContent>
                <AssistViews>
                    <AssistView Header="Prompt">
                        <ViewTemplate>
                            <div class="view-container">
                                <SfTextArea @ref="TextArea" ResizeMode="Syncfusion.Blazor.Inputs.Resize.None" RowCount="5" Placeholder="Enter your prompt..." @oninput="OnInput"></SfTextArea>
                                <SfButton CssClass="e-primary generate-btn" @onclick="GenerateContent" Disabled="@disable">Generate Prompt</SfButton>
                                <ul class="suggestions">
                                    @foreach (var suggestion in suggestions)
                                    {
                                        <li class="suggestion-item e-card" @onclick="() => clickHandler(suggestion)">@suggestion</li>
                                    }
                                </ul>
                            </div>
                        </ViewTemplate>
                    </AssistView>
                    <CustomView Header="Response" IconCss="e-icons e-comment-show">
                        <ViewTemplate>
                            <div class="view-container response-view">
                                @if (isDefaultResponse)
                                {
                                    <div class="responseItemContent default-response e-card">
                                        <span class="e-icons e-circle-info"></span>
                                        No prompt provided. Please enter a prompt and click 'Generate Prompt' to see the response.
                                    </div>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(contentResponse))
                                    {
                                        <div class="responseItemContent e-card">
                                            <div class="response-header"><b>Prompt:</b> @currentPrompt</div>
                                            <hr style="height: 1px;margin: 0;">
                                            <div class="content">
                                                @((MarkupString)contentResponse)
                                                <hr style="height: 1px;margin: 0;">
                                                <div class="options">
                                                    <button id="copyBtn" class="e-btn e-normal" @onclick="ChangeContent">@copyContent</button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="responseItemContent e-card">
                                            <div class="response-header"><b>Prompt:</b> @currentPrompt</div>
                                            <hr style="height: 1px;margin: 0;">
                                            <div class="content">
                                                <div class="e-skeleton e-shimmer-wave" style="width: 100%; height: 20px;"></div>
                                                <div class="e-skeleton e-shimmer-wave" style="width: 80%; height: 20px;"></div>
                                                <div class="e-skeleton e-shimmer-wave" style="width: 100%; height: 20px;"></div>
                                                <hr style="height: 1px;margin: 0;">
                                                <div class="options">
                                                    <button id="copyBtn" class="e-btn e-normal e-skeleton e-shimmer-wave">Copy</button>
                                                </div>
                                            </div>
                                        </div>              
                                    }
                                    if (contentResponseList.Count != 0)
                                    {
                                        @for (int i = 0; i < contentResponseList.Count - 1; i++)
                                        {
                                            <div class="responseItemContent e-card">
                                                <div class="response-header"><b>Prompt:</b> @promptList[i]</div>
                                                <hr style="height: 1px;margin: 0;">
                                                <div class="content">
                                                    @((MarkupString)contentResponseList[i])
                                                    <hr style="height: 1px;margin: 0;">
                                                    <div class="options">
                                                        <button id="copyBtn" class="e-btn e-normal">Copy</button>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        </ViewTemplate>
                    </CustomView>
                    <CustomView Header="Custom">
                        <ViewTemplate>
                            <div class="view-container"><h5>Custom view content</h5></div>
                        </ViewTemplate>
                    </CustomView>
                </AssistViews>
            </ChildContent>
        </SfAIAssistView>
    </div>
</div>

@code {
    private SfAIAssistView AIAssistView;
    private SfTextArea TextArea;
    private int activeIndex;
    private string copyClass;
    private string response = "For real-time prompt processing, connect the AIAssistView component to your preferred AI service, such as OpenAI or Azure Cognitive Services.";
    private List<string> Prompt = new List<string>();
    private List<string> copyClasses = new List<string>();
    private bool isDefaultResponse = true;
    private bool disable = true;
    private List<string> contentResponseList = new List<string>();
    private List<string> promptList = new List<string>();
    private string contentResponse = string.Empty;
    private string contentResponses = string.Empty;
    private string currentPrompt = string.Empty;
    private string copyContent = "Copy";
    private string promptResponse = string.Empty;

    List<string> suggestions = new List<string> { "How do I set daily goals in my work day?", "Steps to publish a e-book with marketing strategy" };

    public class AssistModel
    {
        public string Prompt { get; set; }
        public string Response { get; set; }
        public List<string> SuggestionData { get; set; }
    }

    private List<AssistModel> prompts = new List<AssistModel>()
    {
        new AssistModel() { Prompt = "How do I set daily goals in my work day?", Response = "<p>To stay focused and productive, try these steps for setting daily goals:</p> <ol><li><strong>Identify Priorities:</strong> List the most important tasks based on deadlines or significance.</li> <li><strong>Break Down Tasks:</strong> Split larger tasks into smaller, manageable steps.</li> <li><strong>Set SMART Goals:</strong> Make sure goals are Specific, Measurable, Achievable, Relevant, and Time-bound.</li> <li><strong>Time Blocking:</strong> Allocate specific times for each task to stay organized and on track.</li></ol> <p>Would you like more tips on any of these steps?</p>", SuggestionData = new List<string> { "How do I prioritize tasks effectively?", "What tools or apps can help me prioritize tasks?" } },

        new AssistModel() { Prompt = "Steps to publish a e-book with marketing strategy", Response = "<p>To publish an e-book, follow the steps below:</p> <ol><li><strong>Write and format your e-book:</strong> Ensure your content is well-organized, edited, and formatted for digital reading.</li> <li><strong>Choose a publishing platform:</strong> Platforms like Amazon Kindle Direct Publishing (KDP) or Smashwords can help you publish and distribute your e-book.</li> <li><strong>Develop a marketing strategy:</strong> Utilize social media, email newsletters, and book promotion sites to create buzz and reach your target audience.</li> <li><strong>Launch and promote:</strong> Schedule a launch date, gather reviews, and continue promoting through various channels to maintain momentum and drive sales.</li></ol> <p>Do you have a specific topic in mind for your e-book?</p>", SuggestionData = new List<string>  { "How do I create an eye-catching e-book cover?", "What are common mistakes to avoid in e-book covers?" } },

        new AssistModel() { Prompt = "How do I prioritize tasks effectively?", Response = "<p>To stay focused and productive, set daily goals by:</p> <ol><li><strong>Identifying Priorities:</strong> List important tasks based on deadlines or significance.</li> <li><strong>Breaking Down Tasks:</strong> Divide larger tasks into smaller, manageable steps.</li> <li><strong>Setting SMART Goals:</strong> Ensure goals are Specific, Measurable, Achievable, Relevant, and Time-bound. </li> <li><strong>Time Blocking:</strong>Schedule specific times for each task to stay organized.</li></ol> <p> Need more tips on any of these steps? </p>" },

        new AssistModel() { Prompt = "What tools or apps can help me prioritize tasks?", Response = "<p>Here are some tools to help you prioritize tasks effectively:</p> <ol><li><strong>Google Keep:</strong> For simple note-taking and task organization with labels and reminders.</li> <li><strong>Scoro:</strong> A project management tool for streamlining activities and team collaboration.</li> <li><strong>Evernote:</strong> Great for note-taking, to-do lists, and reminders.</li> <li><strong>Todoist:</strong> A powerful task manager for setting priorities and tracking progress.</li></ol> <p>Are you looking for tools to manage a specific type of task or project?</p>" },

        new AssistModel() { Prompt = "How do I create an eye-catching e-book cover?", Response = "<p>Creating an eye-catching e-book cover involves a few key steps:</p> <ol><li><strong>Understand your genre and audience:</strong> Research covers of popular books in your genre to see what appeals to your target readers.</li> <li><strong>Choose the right imagery and colors:</strong> Use high-quality images and a color scheme that reflects the tone and theme of your book.</li> <li><strong>Focus on typography:</strong> Select fonts that are readable and complement the overall design. The title should be prominent and easy to read even in thumbnail size.</li> <li><strong>Use design tools or hire a professional:</strong> Tools like Canva or Adobe Spark can help you create a professional-looking cover. Alternatively, consider hiring a graphic designer for a more polished result.</li></ol> <p>Would you like some tips on where to find good images or fonts for your cover?</p>" },

        new AssistModel() { Prompt = "What are common mistakes to avoid in e-book covers?", Response = "<p>Here are some common mistakes to avoid when designing an e-book cover:</p> <ol><li><strong>Cluttered design:</strong> Overloading the cover with too many elements can make it look messy and unprofessional. Keep it simple and focused.</li> <li><strong>Poor quality images:</strong> Using low-resolution or generic stock images can detract from the overall appeal. Always opt for high-quality, relevant visuals.</li> <li><strong>Unreadable fonts:</strong> Fancy or overly intricate fonts can be hard to read, especially in thumbnail size. Choose clear, legible fonts for the title and author name.</li> <li><strong>Ignoring genre conventions:</strong> Each genre has its own visual cues. Not adhering to these can confuse potential readers about the book’s content.</li> <li><strong>Inconsistent branding:</strong> If you have a series or multiple books, ensure a consistent style across all covers to build a recognizable brand.</li></ol> <p>Would you like any specific advice on designing your cover?</p>" },
    };

    private void OnInput(ChangeEventArgs e)
    {
        disable = string.IsNullOrEmpty(e.Value.ToString());
        InvokeAsync(StateHasChanged);
    }

    private void clickHandler(string content)
    {
        if (!string.IsNullOrEmpty(content))
        {
            TextArea.Value = content;
            disable = false;
        }
    }

    private void GenerateContent ()
    {
        var promptValue = TextArea.Value;
        promptList.Add(promptValue);
        contentResponse = string.Empty;
        if (!string.IsNullOrEmpty(promptValue))
        {
            TextArea.Value = string.Empty;
            disable = true;
            AIAssistView.ActiveView = 1;
            currentPrompt = promptValue;
            UpdateResponseView(promptValue);
        }
    }

    private async void UpdateResponseView(string aiprompt)
    {
        isDefaultResponse = false;
        
        var isPromptFound = prompts.Any(prompt => prompt.Prompt == aiprompt);
        var defaultResponse = "For real-time prompt processing, connect the AI AssistView control to your preferred AI service, such as OpenAI or Azure Cognitive Services. Ensure you obtain the necessary API credentials to authenticate and enable seamless integration.";
        var promptData = prompts.FirstOrDefault(prompt => prompt.Prompt == aiprompt);
        promptResponse = isPromptFound ? promptData.Response : defaultResponse;
        contentResponseList.Add(promptResponse);
        contentResponses += promptResponse;
        await Task.Delay(3000);
        contentResponse = promptResponse;
        InvokeAsync(StateHasChanged).GetAwaiter();
    }

    private async void ChangeContent()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", new Regex("<.*?>", RegexOptions.Compiled).Replace(contentResponse, string.Empty));
        copyContent = "Copied!";
        contentResponse = promptResponse;
        StateHasChanged();
        await Task.Delay(1000);
        copyContent = "Copy";
        contentResponse = promptResponse;
        StateHasChanged();
    }
}
<style>

    .views-aiassistview {
        width: max(50%, 500px);
        margin: 30px auto;
    }

    .views-aiassistview .view-container {
        margin: 20px auto;
        width: 80%;
    }

    .views-aiassistview .view-container:not(.response-view) {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .views-aiassistview .view-container .generate-btn,
    .views-aiassistview .view-container .suggestions li {
        width: fit-content;
    }

    .views-aiassistview .view-container .suggestions {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    .views-aiassistview .view-container .suggestions li {
        padding: 5px 10px;
        margin-top: 10px;
        cursor: pointer;
    }

    .views-aiassistview .response-view {
        flex-direction: column-reverse;
        max-height: 450px;
    }

    .views-aiassistview .view-container .responseItemContent {
        padding: 10px 10px;
        margin-top: 10px;
        display: flex;
        gap: 10px;
        font-size: 14px;
        line-height: 28px;
    }

    .views-aiassistview .view-container .responseItemContent .response-header {
        font-style: italic;
    }

    .views-aiassistview .view-container .responseItemContent span {
        font-size: 20px;
        margin-top: 3px;
    }

    .views-aiassistview .view-container .responseItemContent:hover {
        background: none;
    }

    .views-aiassistview .view-container .default-response {
        flex-direction: row;
    }

    .views-aiassistview .options {
        padding-top: 10px;
    }

    @@media only screen and (max-width: 750px) {
        .views-aiassistview,
        .views-aiassistview .view-container .generate-btn,
        .views-aiassistview .view-container .suggestions li {
            width: 100%;
        }

        .views-aiassistview .view-container {
            width: 90%;
        }

        .views-aiassistview .view-container .suggestions li {
            padding: 0px 10px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            display: block;
        }
    }

</style>
