@page "/ai-assistview/template"
@using Syncfusion.Blazor.InteractiveChat
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SplitButtons
@inject IJSRuntime JSRuntime

@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates the template functionality of the AI AssistView component.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, the AI AssistView component uses customizable templates for the banner, prompts, responses, and suggestions. We have used the <code>BannerTemplate</code>, <code>PromptItemTemplate</code>, <code>ResponseItemTemplate</code> and <code>PromptSuggestionItemTemplate</code> to define the structure and appearance of these elements.
    </p>
    <p>
        By using the <code>ExecutePromptAsync</code> method you can trigger the prompt request externally and generate the output based on the <code>PromptRequested</code> data returned. If found, the response will be displayed and suggestions updated.
    </p>
</ActionDescription>

<div class="control-section">
    <div class="template-aiassistview">
        <SfAIAssistView ID="aiAssistView" @ref="AIAssist" PromptSuggestions="@suggestions" PromptSuggestionsHeader="Hello! Ask Questions, to better understand how your prompt interacts with AI AssistView!" PromptRequested="@PromptRequest">
            <AssistViews>
                <AssistView>
                    <BannerTemplate>
                        <div class="banner-content">
                            <h3><span class="e-icons e-assistview-icon"></span>AI Assistance</h3>
                            <SfCarousel ID="bannerCarousel" ButtonsVisibility="CarouselButtonVisibility.Visible" AnimationEffect="CarouselAnimationEffect.Fade" Width="100%" Height="60%" ShowIndicators="false" PartialVisible="true">
                                @foreach (CarouselModel carouselItem in CarouselList)
                                {
                                    <CarouselItem>
                                        <div class="carousel-template" @onclick="() => OnCarouselItemClick(carouselItem)">
                                            <img src=@(UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/carousel/" + @carouselItem.ImagePath)) />
                                            <div class="e-card">
                                                <div class="e-card-header">
                                                    @carouselItem.Suggestion
                                                </div>
                                            </div>
                                        </div>
                                    </CarouselItem>
                                }
                            </SfCarousel>
                        </div>
                    </BannerTemplate>
                    <PromptItemTemplate>
                        <div class="promptItemContent">
                            <div class="prompt-header">
                                You
                                <span class="e-icons e-user"></span>
                            </div>
                            <div class="content">@context.Prompt.Replace(@"<span class=""e-icons e-circle-info""></span>", "")</div>
                        </div>
                    </PromptItemTemplate>
                    <ResponseItemTemplate>
                        <div class="responseItemContent">
                            <div class="response-header">
                                <span class="e-icons e-assistview-icon"></span>
                                AI Assist
                            </div>
                            <div class="content">@((MarkupString)context.Response)</div>
                        </div>
                    </ResponseItemTemplate>
                    <PromptSuggestionItemTemplate>
                        <div class='suggestion-item active'>
                            <span class="e-icons e-circle-info"></span>
                            <div class="content">@context.PromptSuggestion</div>
                        </div>
                    </PromptSuggestionItemTemplate>
                </AssistView>
            </AssistViews>
            <AssistViewToolbar>
                <AssistViewToolbarItem Type="ItemType.Spacer"></AssistViewToolbarItem>
                <AssistViewToolbarItem Type="ItemType.Input">
                    <Template>
                        <SfDropDownButton id="ddMenu" IconCss="e-icons e-user" CssClass="e-caret-hide">
                            <DropDownMenuItems>
                                <DropDownMenuItem Text="Settings" IconCss="e-icons e-settings"></DropDownMenuItem>
                                <DropDownMenuItem Separator="true"></DropDownMenuItem>
                                <DropDownMenuItem Text="Log out"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>
                    </Template>
                </AssistViewToolbarItem>
            </AssistViewToolbar>
        </SfAIAssistView>
    </div>
</div>
@code {
    private SfAIAssistView AIAssist;
    private SfTextArea TextArea;
    private string textAreaValue;
    private bool shouldShowSuggestion { get; set; } = true;
    private Dictionary<int, bool> promptCopiedState = new Dictionary<int, bool>();
    private Dictionary<int, bool> responseCopiedState = new Dictionary<int, bool>();
    private string promptItem;

    List<string> suggestions = new List<string> { "How do I set daily goals in my work day?", "Steps to publish a e-book with marketing strategy" };

    public class AssistModel
    {
        public string Prompt { get; set; }
        public string Response { get; set; }
        public List<string> SuggestionData { get; set; }
    }

    private List<AssistModel> prompts = new List<AssistModel>()
    {
        new AssistModel() { Prompt = "How do I set daily goals in my work day?", Response = "<p>To stay focused and productive, try these steps for setting daily goals:</p> <ol><li><strong>Identify Priorities:</strong> List the most important tasks based on deadlines or significance.</li> <li><strong>Break Down Tasks:</strong> Split larger tasks into smaller, manageable steps.</li> <li><strong>Set SMART Goals:</strong> Make sure goals are Specific, Measurable, Achievable, Relevant, and Time-bound.</li> <li><strong>Time Blocking:</strong> Allocate specific times for each task to stay organized and on track.</li></ol> <p>Would you like more tips on any of these steps?</p>", SuggestionData = new List<string> { "How do I prioritize tasks effectively?", "What tools or apps can help me prioritize tasks?" } },

        new AssistModel() { Prompt = "Steps to publish a e-book with marketing strategy", Response = "<p>To publish an e-book, follow the steps below:</p> <ol><li><strong>Write and format your e-book:</strong> Ensure your content is well-organized, edited, and formatted for digital reading.</li> <li><strong>Choose a publishing platform:</strong> Platforms like Amazon Kindle Direct Publishing (KDP) or Smashwords can help you publish and distribute your e-book.</li> <li><strong>Develop a marketing strategy:</strong> Utilize social media, email newsletters, and book promotion sites to create buzz and reach your target audience.</li> <li><strong>Launch and promote:</strong> Schedule a launch date, gather reviews, and continue promoting through various channels to maintain momentum and drive sales.</li></ol> <p>Do you have a specific topic in mind for your e-book?</p>", SuggestionData = new List<string>  { "How do I create an eye-catching e-book cover?", "What are common mistakes to avoid in e-book covers?" } },

        new AssistModel() { Prompt = "How do I prioritize tasks effectively?", Response = "<p>To stay focused and productive, set daily goals by:</p> <ol><li><strong>Identifying Priorities:</strong> List important tasks based on deadlines or significance.</li> <li><strong>Breaking Down Tasks:</strong> Divide larger tasks into smaller, manageable steps.</li> <li><strong>Setting SMART Goals:</strong> Ensure goals are Specific, Measurable, Achievable, Relevant, and Time-bound. </li> <li><strong>Time Blocking:</strong>Schedule specific times for each task to stay organized.</li></ol> <p> Need more tips on any of these steps? </p>" },

        new AssistModel() { Prompt = "What tools or apps can help me prioritize tasks?", Response = "<p>Here are some tools to help you prioritize tasks effectively:</p> <ol><li><strong>Google Keep:</strong> For simple note-taking and task organization with labels and reminders.</li> <li><strong>Scoro:</strong> A project management tool for streamlining activities and team collaboration.</li> <li><strong>Evernote:</strong> Great for note-taking, to-do lists, and reminders.</li> <li><strong>Todoist:</strong> A powerful task manager for setting priorities and tracking progress.</li></ol> <p>Are you looking for tools to manage a specific type of task or project?</p>" },

        new AssistModel() { Prompt = "How do I create an eye-catching e-book cover?", Response = "<p>Creating an eye-catching e-book cover involves a few key steps:</p> <ol><li><strong>Understand your genre and audience:</strong> Research covers of popular books in your genre to see what appeals to your target readers.</li> <li><strong>Choose the right imagery and colors:</strong> Use high-quality images and a color scheme that reflects the tone and theme of your book.</li> <li><strong>Focus on typography:</strong> Select fonts that are readable and complement the overall design. The title should be prominent and easy to read even in thumbnail size.</li> <li><strong>Use design tools or hire a professional:</strong> Tools like Canva or Adobe Spark can help you create a professional-looking cover. Alternatively, consider hiring a graphic designer for a more polished result.</li></ol> <p>Would you like some tips on where to find good images or fonts for your cover?</p>" },

        new AssistModel() { Prompt = "What are common mistakes to avoid in e-book covers?", Response = "<p>Here are some common mistakes to avoid when designing an e-book cover:</p> <ol><li><strong>Cluttered design:</strong> Overloading the cover with too many elements can make it look messy and unprofessional. Keep it simple and focused.</li> <li><strong>Poor quality images:</strong> Using low-resolution or generic stock images can detract from the overall appeal. Always opt for high-quality, relevant visuals.</li> <li><strong>Unreadable fonts:</strong> Fancy or overly intricate fonts can be hard to read, especially in thumbnail size. Choose clear, legible fonts for the title and author name.</li> <li><strong>Ignoring genre conventions:</strong> Each genre has its own visual cues. Not adhering to these can confuse potential readers about the book’s content.</li> <li><strong>Inconsistent branding:</strong> If you have a series or multiple books, ensure a consistent style across all covers to build a recognizable brand.</li></ol> <p>Would you like any specific advice on designing your cover?</p>" },
    };

    public class CarouselModel
    {
        public string ImagePath { get; set; }
        public string Suggestion { get; set; }
    }

    private List<CarouselModel> CarouselList = new List<CarouselModel>()
    {
        new CarouselModel() { ImagePath = "moscow.png", Suggestion = "How do I prioritize tasks effectively?" },
        new CarouselModel() { ImagePath = "san-francisco.png", Suggestion = "How do I set daily goals in my work day?" },
        new CarouselModel() { ImagePath = "london.png", Suggestion = "Steps to publish a e-book with marketing strategy" },
        new CarouselModel() { ImagePath = "tokyo.png", Suggestion = "What tools or apps can help me prioritize tasks?" }
    };

    private void OnCarouselItemClick(CarouselModel carouselItem)
    {
        string prompt = carouselItem.Suggestion;
        if (!string.IsNullOrEmpty(prompt))
        {
            AIAssist.ExecutePromptAsync(prompt);
        }
    }
    private async Task PromptRequest(AssistViewPromptRequestedEventArgs args)
    {
        await Task.Delay(3000);
        var isPromptFound = prompts.Any(prompt => prompt.Prompt == args.Prompt);
        var promptData = prompts.FirstOrDefault(prompt => prompt.Prompt == args.Prompt);

        var defaultResponse = "For real-time prompt processing, connect the AI AssistView control to your preferred AI service, such as OpenAI or Azure Cognitive Services. Ensure you obtain the necessary API credentials to authenticate and enable seamless integration.";
        args.Response = isPromptFound ? promptData.Response : defaultResponse;
        args.PromptSuggestions = isPromptFound ? promptData.SuggestionData : suggestions;
    }
}
<style>
    .template-aiassistview {
        height: 650px;
        width: 65vw;
        margin: 0 auto;
    }

    .e-assistview-icon:before {
        margin-right: 10px;
    }

    .template-aiassistview .banner-content {
        display: flex;
        flex-direction: column;
        justify-content: center;
        text-align: center;
        align-items: center;
        padding: 10px 10px;
        width: 65%;
        margin: 0 auto;
    }

    .template-aiassistview .e-carousel.e-partial .e-carousel-slide-container {
        padding: 0 50px;
    }

    .template-aiassistview .banner-content h3 {
        display: flex;
        margin: 20px 0px;
        font-size: 25px;
    }

    .template-aiassistview .banner-content .carousel-template {
        padding: 5px;
        position: relative;
        display: flex;
        justify-content: center;
        cursor: pointer;
    }

    .template-aiassistview .banner-content img {
        width: 100%;
        height: 250px;
        border-radius: 10px;
    }

    .template-aiassistview .banner-content .e-card {
        position: absolute;
        bottom: 20px;
        width: 86%;
        opacity: 0.8;
    }

    .template-aiassistview .banner-content .e-card-header {
        width: 100%;
        padding: 12px;
    }

    .template-aiassistview .e-aiassist-view .e-aiassist-views .e-aiassist-suggestions li {
        padding: 0;
        border: none;
        box-shadow: none;
    }

    .template-aiassistview .suggestion-item {
        display: flex;
        align-items: center;
        background-color: #686868;
        color: white;
        padding: 4px 10px;
        opacity: 0.8;
        gap: 5px;
        height: 35px;
        border-radius: 5px;
    }

    .template-aiassistview .suggestion-item .content {
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
    }

    .template-aiassistview #ddMenu {
        border-radius: 50%;
    }

    .template-aiassistview .e-aiassist-view .e-aiassist-views .e-aiassist-prompt-text {
        background: none;
    }

    .template-aiassistview .promptItemContent,
    .template-aiassistview .responseItemContent {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .template-aiassistview .promptItemContent {
        align-items: flex-end;
        margin-right: 20px
    }

    .template-aiassistview .responseItemContent {
        margin-left: 20px
    }

    .template-aiassistview .promptItemContent .prompt-header,
    .template-aiassistview .responseItemContent .response-header {
        font-size: 20px;
        font-weight: bold;
        display: flex;
        align-items: center;
    }

    .template-aiassistview #ddMenu.e-btn.e-icon-btn {
        padding: 8px;
        line-height: 14px;
    }

    .template-aiassistview #ddMenu.e-dropdown-btn.e-btn .e-btn-icon {
        margin-left: 0;
        width: 1em;
    }

    .template-aiassistview .promptItemContent .prompt-header span {
        margin-left: 10px;
    }

    .template-aiassistview .promptItemContent .content {
        margin-right: 35px;
    }

    .template-aiassistview .responseItemContent .content {
        margin-left: 35px;
    }

    .template-aiassistview .e-response-item-template .e-toolbar-items {
        margin-left: 35px;
    }

    .template-aiassistview .e-carousel .e-carousel-navigators .e-next .e-next-button,
    .template-aiassistview .e-carousel .e-carousel-navigators .e-next .e-next-button:focus,
    .template-aiassistview .e-carousel .e-carousel-navigators .e-next .e-next-button:hover,
    .template-aiassistview .e-carousel .e-carousel-navigators .e-previous .e-previous-button,
    .template-aiassistview .e-carousel .e-carousel-navigators .e-previous .e-previous-button:focus,
        .template-aiassistview .e-carousel .e-carousel-navigators .e-previous .e-previous-button:hover {
        outline: none;
        background-color: #f0f0f0;
        .e-btn-icon {
            color: #333;
        }
    }

    body[class*="dark"] .template-aiassistview .e-carousel .e-carousel-navigators .e-next .e-next-button,
    body[class*="high"] .template-aiassistview .e-carousel .e-carousel-navigators .e-next .e-next-button,
    body[class*="dark"] .template-aiassistview .e-carousel .e-carousel-navigators .e-next .e-next-button:focus,
    body[class*="high"] .template-aiassistview .e-carousel .e-carousel-navigators .e-next .e-next-button:focus,
    body[class*="dark"] .template-aiassistview .e-carousel .e-carousel-navigators .e-next .e-next-button:hover,
    body[class*="high"] .template-aiassistview .e-carousel .e-carousel-navigators .e-next .e-next-button:hover,
    body[class*="dark"] .template-aiassistview .e-carousel .e-carousel-navigators .e-previous .e-previous-button,
    body[class*="high"] .template-aiassistview .e-carousel .e-carousel-navigators .e-previous .e-previous-button,
    body[class*="dark"] .template-aiassistview .e-carousel .e-carousel-navigators .e-previous .e-previous-button:focus,
    body[class*="high"] .template-aiassistview .e-carousel .e-carousel-navigators .e-previous .e-previous-button:focus,
    body[class*="dark"] .template-aiassistview .e-carousel .e-carousel-navigators .e-previous .e-previous-button:hover,
    body[class*="high"] .template-aiassistview .e-carousel .e-carousel-navigators .e-previous .e-previous-button:hover {
        outline: none;
        background-color: #333;
        .e-btn-icon {
            color: #f0f0f0;
        }
    }

    @@media only screen and (max-width: 840px) {
        .template-aiassistview,
        .template-aiassistview .banner-content {
            width: 100%;
        }
    }
</style>