@page "/chart/range-area"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p>This <a target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-charts/chart-types/range-area-chart'>Blazor Range Area Chart</a> example visualizes the maximum and minimum temperatures of different months with default range area series in the chart.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the range area type chart. The range area type chart is used to display continuous data points as a set of lines varying between high and low values over time intervals and across different categories.</p>
    <p>You can also <code>zoom</code> the chart to check the temperature for a week or a day.</p>
    <ul>
        <li>Click and drag the mouse on a chart area to enable selection zooming.</li>
        <li>Hover the mouse on the toolbar at the top right corner of chart area to switch between zooming and panning.</li>
        <li>Pinch in and pinch out the chart area to zoom in or zoom out the chart in touch enabled devices.</li>
        <li>Touch and drag to pan the chart.</li>
        <li>Double tap to reset the zoomed chart.</li>
    </ul>
    <p>The chart component supports four types of zooming which can be set using <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartZoomSettings.html#Syncfusion_Blazor_Charts_ChartZoomSettings_EnableSelectionZooming'>EnableSelectionZooming</a>, <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartZoomSettings.html#Syncfusion_Blazor_Charts_ChartZoomSettings_EnablePinchZooming'>EnablePinchZooming</a>, <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartZoomSettings.html#Syncfusion_Blazor_Charts_ChartZoomSettings_EnableMouseWheelZooming'>EnableMouseWheelZooming</a>, and <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartZoomSettings.html#Syncfusion_Blazor_Charts_ChartZoomSettings_EnableDeferredZooming'>EnableDeferredZooming</a> property.</p>
    <p>More information about the range area series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/range-area'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Temperature Variation" Width="@Width" Theme="@Theme">
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}˚C">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartZoomSettings EnableSelectionZooming="true" Mode="ZoomMode.X" EnableMouseWheelZooming="true" EnablePan="true" EnablePinchZooming="true"></ChartZoomSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartPoints" Name="India" XName="Period" High="HighTemp" Low="LowTemp" Opacity="0.4" Type="ChartSeriesType.RangeArea">
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>


@code{

    private Random randomNum = new Random();
    private Theme Theme { get; set; }
    public string Width { get; set; } = "60%";
    public List<RangeAreaChartData> ChartPoints { get; set; }

    protected override void OnInitialized()
    {
        ChartPoints = this.GetData();
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender) {
            if (SampleService.IsDevice)
            {
                 Width = "100%";
                 StateHasChanged();
            }
        }
    }

    private List<RangeAreaChartData> GetData()
    {
        List<RangeAreaChartData> chartData = new List<RangeAreaChartData>();
        double value = 35;
        for (var i = 0; i < 359; i++)
        {
            if (randomNum.NextDouble() > .5)
            {
                value += randomNum.NextDouble();
            }
            else
            {
                value -= randomNum.NextDouble();
            }
            chartData.Add(new RangeAreaChartData() { Period = new DateTime(2015, 1, 1).AddDays(i), HighTemp = value, LowTemp = (value - 10) });
        }
        return chartData;
    }

    public class RangeAreaChartData
    {
        public DateTime Period { get; set; }
        public double HighTemp { get; set; }
        public double LowTemp { get; set; }
    }

}
