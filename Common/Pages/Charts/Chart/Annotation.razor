@page "/chart/annotation"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@using Newtonsoft.Json
@using System.IO
@using System.Net.Http.Json

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inherits SampleBaseComponent;

<SampleDescription>
    <p> This sample illustrates speed data for Interlagos circuit. In area-based series, data points can be annotated using symbols.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure annotation feature in chart. We have used an area chart to depict speed data for Interlagos circuit.  An annotation can hold any html element as its content, here we have added the circuit session as its content.</p>
    <p><a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/tool-tip'>Tooltip</a> is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    More information about the annotations can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-annotations'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Speed Data Plot for Interlagos Circuit" Theme="@Theme">
        <ChartEvents OnAxisLabelRender="ChartAxisLabelRender"></ChartEvents>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryXAxis Title="Distance" LabelFormat="N2">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Speed (KM/H)" Minimum="50" Maximum="400">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartPoints" XName="Distance" Fill="rgb(247, 206, 105,0.5)" YName="Speed" Type="ChartSeriesType.Area">
                <ChartMarker Height="12" Width="12" Fill="rgb(247, 206, 105,0.7)"></ChartMarker>
                <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
            </ChartSeries>
            <ChartSeries DataSource="@ChartPoints" EnableTooltip=false XName="Distance" Width="2.5" YName="Speed" Fill="#000000" Type="ChartSeriesType.Line">
                <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
            </ChartSeries>
            <ChartSeries DataSource="@LinePoints" EnableTooltip=false XName="Distance" YName="Speed" Fill="#000000" Width="1" Type="ChartSeriesType.Line">
                <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartAnnotations>
            <ChartAnnotation CoordinateUnits="Units.Point" X=0.360 Y=80>
                <ContentTemplate>
                    <div class='box-bottom'>Senna S</div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation CoordinateUnits="Units.Point" X=1.400 Y=130>
                <ContentTemplate>
                    <div class='box-bottom'>Descida do Lego</div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation CoordinateUnits="Units.Point" X=2.100 Y=200>
                <ContentTemplate>
                    <div class='box-bottom'>Ferradura</div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation CoordinateUnits="Units.Point" X=0.555 Y=170>
                <ContentTemplate>
                    <div class='box-left'>Curva do Sol</div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation CoordinateUnits="Units.Point" X=0.700 Y=292>
                <ContentTemplate>
                    <div class='box-top-left'>Reta Oposta</div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation CoordinateUnits="Units.Point" X=2.750 Y=80>
                <ContentTemplate>
                    <div class='box-bottom'>Bico de Pato</div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation CoordinateUnits="Units.Point" X=3.136 Y=284>
                <ContentTemplate>
                    <div class='box-top'>Mergulho</div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation CoordinateUnits="Units.Point" X=3.270 Y=98>
                <ContentTemplate>
                    <div class='box-bottom'>Junção</div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation CoordinateUnits="Units.Point" X=3.800 Y=312>
                <ContentTemplate>
                    <div class='box-top'>Subida dos <br /> Boxes</div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation CoordinateUnits="Units.Point" X=1.65 Y=300>
                <ContentTemplate>
                    <div>Max, accelertion <br /> 5.00 g at 5th gear</div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation CoordinateUnits="Units.Point" X=2.60 Y=280>
                <ContentTemplate>
                    <div>Max, accelertion <br /> 4.58 g at 5th gear</div>
                </ContentTemplate>
            </ChartAnnotation>
        </ChartAnnotations>
        <ChartTooltipSettings Enable=true Shared=true Header="" EnableMarker=false Format="Distance: ${point.x} KM <br> ${point.y} KM/H" Fill="white">
            <ChartTooltipBorder Color="rgb(247, 206, 105)" Width="2"></ChartTooltipBorder>
            <ChartTooltipTextStyle Color="black"></ChartTooltipTextStyle>
        </ChartTooltipSettings>
    </SfChart>
</div>
<style>
    div[id*=_Annotation_3] {
        transform: translate(0%, -50%) !important;
    }
    ellipse[id*=_Trackball_0] {
        fill: rgb(247, 206, 105) !important;
        stroke: rgb(247, 206, 105,0.5) !important;
    }
   
    ellipse[id*=_Trackball_1] {
        fill: rgb(247, 206, 105) !important;
        stroke-width: 1 !important;
        stroke: white !important;
    }
    .box-bottom, .box-left {
        position: relative;
        background: #fdf7e7;
        border: 1.5px solid black;
        padding: 2px 3px 2px 3px;
        border-radius: 0.2em;
        font-size: 11px;
    }

    .box-top, .box-top-left {
        position: relative;
        background: black;
        color: white;
        border: 1.5px solid black;
        padding: 2px 3px 2px 3px;
        border-radius: 0.2em;
        font-size: 11px;
    }

    .box-bottom:after, .box-bottom:before {
        bottom: 100%;
        border: solid transparent;
        content: "";
        position: absolute;
    }

    .box-bottom:after {
        border-color: transparent;
        border-bottom-color: #fdf7e7;
        border-width: 7.5px;
        left: 50%;
        margin-left: -7.5px;
        margin-bottom: -1.5px;
    }

    .box-bottom:before {
        border-color: transparent;
        border-bottom-color: black;
        border-width: 8px;
        left: 50%;
        margin-left: -8px;
    }

    .box-left:after, .box-left:before {
        right: 100%;
        border: solid transparent;
        content: "";
        position: absolute;
    }

    .box-left:after {
        border-color: transparent;
        border-right-color: #fdf7e7;
        border-width: 7.5px;
        margin-left: -7.5px;
        margin-right: -1px;
    }

    .box-left:before {
        border-color: transparent;
        border-right-color: black;
        border-width: 8px;
        margin-left: -8px;
    }

    .box-top:after, .box-top:before {
        top: 100%;
        border: solid transparent;
        content: "";
        position: absolute;
    }

    .box-top:after {
        border-color: transparent;
        border-top-color: black;
        border-width: 7.5px;
        right: 50%;
        margin-right: -7.5px;
        margin-bottom: -1.5px;
    }

    .box-top:before {
        border-color: transparent;
        border-top-color: black;
        border-width: 8px;
        right: 50%;
        margin-right: -8px;
    }

    .box-top-left:after, .box-top-left:before {
        top: 100%;
        border: solid transparent;
        content: "";
        position: absolute;
    }
    .box-top-left:after {
        border-color: transparent;
        border-top-color: black;
        border-width: 7.5px;
        right: 20%;
        margin-right: -7.5px;
        margin-bottom: -1.5px;
    }

    .box-top-left:before {
        border-color: transparent;
        border-top-color: black;
        border-width: 8px;
        right: 20%;
        margin-right: -8px;
    }
</style>
@code{

    private Theme Theme { get; set; }
    public AnnotationData[] ChartPoints { get; set; } = new AnnotationData[] { };

    public List<AnnotationData> LinePoints = new List<AnnotationData>()
        {
            new AnnotationData() { Distance = 1.70, Speed = 258 },
            new AnnotationData() { Distance = 1.62, Speed = 275 },
            new AnnotationData() { Distance = 0.7, Speed = null },
            new AnnotationData() { Distance = 2.95, Speed = 225 },
            new AnnotationData() { Distance = 2.75, Speed = 250 },
        };

    protected override async Task OnInitializedAsync()
    {
        if(File.Exists("../Common/wwwroot/data/chart/annotation-data.json"))
        {
            ChartPoints = JsonConvert.DeserializeObject<AnnotationData[]>(File.ReadAllText("../Common/wwwroot/data/chart/annotation-data.json"));
        }
        else
        {
            ChartPoints = await Http.GetFromJsonAsync<AnnotationData[]>(NavigationManager.BaseUri + SampleService.WebAssetsPath + "data/chart/annotation-data.json");
        }
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }

    public void ChartAxisLabelRender(AxisLabelRenderEventArgs args)
    {
        if (args.Axis.Name == "PrimaryXAxis")
        {
            args.Text = args.Text + " KM";
        }
    }

    public class AnnotationData
    {
        public Nullable<double> Distance { get; set; }
        public Nullable<double> Speed { get; set; }
    }
}
