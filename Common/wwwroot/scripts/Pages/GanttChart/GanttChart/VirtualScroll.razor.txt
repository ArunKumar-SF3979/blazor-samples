@page "/gantt-chart/virtual-scroll"
@using Syncfusion.Blazor.Gantt
@inherits SampleBaseComponent; 

<SampleDescription>
    <p>This sample demonstrates the virtual scroll support in Gantt Chart. It allows users to load a large amount of data effectively and reduces the DOM element’s weight by virtually updating DOM during the vertical scroll.</p>
</SampleDescription>
<ActionDescription>
    <p>Virtualization support is used to render many tasks in Gantt Chart with an Effective performance.</p>
    <p>In this mode, all the tasks are initially fetched from the data source, and only a few records are rendered in DOM, which is compact to the current viewport area. While scrolling, tasks are updated in the DOM as per the current viewport position. Set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.SfGantt-1.html#Syncfusion_Blazor_Gantt_SfGantt_1_EnableVirtualization'>EnableVirtualization</a> property to true to enable row virtualization. Set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.SfGantt-1.html#Syncfusion_Blazor_Gantt_SfGantt_1_EnableColumnVirtualization'>EnableColumnVirtualization</a> property to true to enable column virtualization.</p>
    <p>More information on the virtual scroll can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/gantt-chart/virtualization/'>documentation</a> section.</p>
    
</ActionDescription>

<div class="control-section">
    <div class="row">
        <div class="col-md-12">
            <SfGantt DataSource="@TaskCollection"  Height="450px" Width="100%" TreeColumnIndex="1" EnableVirtualization="true" EnableColumnVirtualization="true" ProjectStartDate="ProjectStartDate" ProjectEndDate="ProjectEndDate">
                <GanttLabelSettings LeftLabel="TaskName" TValue="TaskData"></GanttLabelSettings>
                <GanttTaskFields ParentID="ParentId" Work="Work"  Id="ID" Name="TaskName"  StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"  TaskType="TaskType">
                </GanttTaskFields>
                <GanttColumns>
                    <GanttColumn Field="ID" HeaderText="TaskId" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GanttColumn>
                    <GanttColumn Field="TaskName" HeaderText="TaskName"></GanttColumn>
                    <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
                    <GanttColumn Field="EndDate" HeaderText="End Date"></GanttColumn>
                    <GanttColumn Field="Duration" HeaderText="Duration"></GanttColumn>
                    <GanttColumn Field="Assignee" HeaderText="Assignee"></GanttColumn>
                    <GanttColumn Field="Reporter" HeaderText="Reporter"></GanttColumn>
                    <GanttColumn Field="Progress" HeaderText="Progress" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GanttColumn>
                    <GanttColumn Field="Priority" HeaderText="Priority"></GanttColumn>
                    <GanttColumn Field="Status" HeaderText="Status"></GanttColumn>
                    <GanttColumn Field="Work" HeaderText="Work"></GanttColumn>
                    <GanttColumn Field="TaskType" HeaderText="TaskType"></GanttColumn>
                    <GanttColumn Field="Shift" HeaderText="WorkShift"></GanttColumn>
                    <GanttColumn Field="StoryPoint" HeaderText="StoryPoint" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GanttColumn>
                    <GanttColumn Field="ActualStartDate" HeaderText="ActualStartDate" Format="@DateFormat"></GanttColumn>
                    <GanttColumn Field="ActualEndDate" HeaderText="ActualEndDate" Format="@DateFormat"></GanttColumn>
                    <GanttColumn Field="WorkersCount" HeaderText="Resources Count" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GanttColumn>
                    <GanttColumn Field="ApprovedBy" HeaderText="ApprovedBy"></GanttColumn>              
                    <GanttColumn Field="FixVerison" HeaderText="FixVersion" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GanttColumn>
                    <GanttColumn Field="PlatForm" HeaderText="PlatForm"></GanttColumn>
                    
                </GanttColumns>
                
                <GanttSplitterSettings Position="40%"></GanttSplitterSettings>
            </SfGantt>
        </div>
    </div>
</div>


@code{
    private SfGantt<TaskData> Obj { get; set; }
    private string DateFormat = "MM/dd/yyyy";
    private DateTime ProjectStartDate = new DateTime(2021, 01, 03);
    private DateTime ProjectEndDate = new DateTime(2021, 01, 30);
    private List<TaskData> TaskCollection { get; set; }
    protected override void OnInitialized()
    {
        this.TaskCollection = VirtualData.GetTreeVirtualData();
    }
    public class VirtualData
    {
        public static List<TaskData> GetTreeVirtualData()
        {
            List<TaskData> DataCollection = new List<TaskData>();
            Random rand = new Random();
            var x = 0;
            string[] assignee = { "Allison Janney", "Bryan Fogel", "Richard King", "Alex Gibson" };
            string[] reporter = { "James Ivory", "Jordan Peele", "Guillermo del Toro", "Gary Oldman" };
            string[] priority = { "Normal", "High", "Low", "Ultra Critical" };
            string[] status = { "Validated", "InProgress", "Approved", "Completed" };
            string[] tasktype = { "FixedDuration", "FixedWork", "FixedUnit" };
            string[] shift = { "Noon Shift", "Night Shift", "Regular" };
            int[] storypoint = { 1, 2, 3, 4 };
            string[] fixversion = { "19.1", "19.2", "20.1", "20.2" };
            string[] approvedby = { "Margaret Buchanan", "Van Jack", "Fuller King", "Rose Fuller" };
            string[] platform = { "Blazor", "Angular", "EJ2", "EJ1"};
            for (var i = 1; i <= 100; i++)
            {
                var name = rand.Next(0, 100);
                TaskData Parent = new TaskData()
                {
                    ID = ++x,
                    TaskName = "Task " + x,
                    StartDate = new DateTime(2021, 1, 9),
                    EndDate = new DateTime(2021, 1, 13),
                    ActualStartDate = new DateTime(2021, 1, 9),
                    ActualEndDate = new DateTime(2021, 1, 12),
                    Duration = "5",
                    Assignee = "Mark Bridges",
                    Reporter = "Kobe Bryant",
                    Progress = rand.Next(100),
                    Priority = "High",
                    TaskType = "FixedWork",
                    Status = "Open",
                    Work = 16 + x,
                    Shift = "Regular",
                    StoryPoint = 5,
                    WorkersCount = 4,
                    FixVerison = "20.2",
                    ApprovedBy = "Van Jack",
                    PlatForm = "Blazor"
                };
                DataCollection.Add(Parent);
                for (var j = 1; j <= 4; j++)
                {
                    var childName = rand.Next(0, 100);
                    DataCollection.Add(new TaskData()
                    {
                        ID = ++x,
                        TaskName = "Task " + x,
                        StartDate = new DateTime(2021, 1, 9),
                        EndDate = new DateTime(2019, 1, 13),
                        ActualStartDate = new DateTime(2021, 1, 9),
                        ActualEndDate = new DateTime(2021, 1, 12),
                        Duration = "5",
                        Assignee = assignee[j-1],
                        Reporter = reporter[j-1],
                        Progress = rand.Next(100),
                        ParentId = Parent.ID,
                        Priority = priority[j-1],
                        Status = status[j-1],
                        Work = 96+x,
                        TaskType = tasktype[(j-1) % 3 ],
                        Shift = shift[(j-1) % 3],
                        StoryPoint = storypoint[j-1],
                        WorkersCount = 1,
                        FixVerison = fixversion[j-1],
                        ApprovedBy = approvedby[j-1],
                        PlatForm = platform[j-1]
                    });
                }
            }
            return DataCollection;
        }
    }
    public class TaskData 
    {
        public int ID { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public string Assignee { get; set; }
        public string Reporter { get; set; }
        public int Progress { get; set; }
        public int? ParentId { get; set; }
        public string Status { get; set; }
        public double? Work { get; set; }
        public int WorkersCount { get; set; }
        public string TaskType { get; set; }
        public string ApprovedBy { get; set; } 
        public string Shift { get; set; }
        public string PlatForm { get; set; } 
        public int StoryPoint { get; set; }
        public string Priority { get; set; }
        public string FixVerison { get; set; }
        public DateTime ActualStartDate { get; set; }
        public DateTime ActualEndDate { get; set; }
    }
}
