@page "/"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using BlazorDemos.Shared;
@namespace BlazorDemos.Pages
@inject SampleService SampleService;
@inject NavigationManager UrlHelper;

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
    string projectPath = "";
    string CSSIsolation = "styles/site.css";
#if NET6_0
    projectPath = "Blazor_Server_Common_NET6";
    CSSIsolation = "Blazor_Server_Common_NET6.bundle.scp.css";
#elif NET7_0
    projectPath = "Blazor_Server_Common_NET7";
    CSSIsolation = "Blazor_Server_Common_NET7.bundle.scp.css";
#endif
}

<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Google tag (gtag.js) --> 
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-WC4JKKPHH0"></script> 
    <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'G-WC4JKKPHH0'); </script>
    <!-- Google Tag Manager -->
    <script>
        (function (w, d, s, l, i) {
            w[l] = w[l] || []; w[l].push({
                'gtm.start':
                    new Date().getTime(), event: 'gtm.js'
            }); var f = d.getElementsByTagName(s)[0],
                j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
                    'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
        })(window, document, 'script', 'dataLayer', 'GTM-WLQL39J');</script>
    <!-- End Google Tag Manager -->

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    @* Added content response header to avoid from XSS attacks *@
    <meta http-equiv="content-type" content="text/html; charset=UTF-8; X-Content-Type-Options=nosniff">
    @* Added CSP policy to prevent from the JS injection and XSS attacks *@
    <meta http-equiv="Content-Security-Policy" content="default-src *; style-src * 'unsafe-inline' data:; style-src-elem * 'unsafe-inline' data:; img-src * 'unsafe-inline' blob: data:; media-src * 'unsafe-inline' blob: data:; font-src * data:; script-src * 'unsafe-inline' 'unsafe-eval' blob: data:;">
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
    @*<component type="typeof(SampleMetaData)" render-mode="ServerPrerendered" />*@

    <base href="~/" />
    <link href="_content/@projectPath/styles/bootstrap.min.css" rel="stylesheet" />
    <link href="_content/@projectPath/favicon.ico" type="image/x-icon" rel="shortcut icon" />
    <link href="_content/@projectPath/@CSSIsolation" rel="stylesheet" />
    <component type="typeof(DynamicResources)" render-mode="Static" />

    <environment include="Development">
        <link href="_content/@projectPath/styles/common/devices.css" rel="stylesheet" media="(max-width: 1024px)" />
    </environment>
    <environment include="Production">
        <link href="_content/@projectPath/styles/common/devices.min.css" rel="stylesheet" media="(max-width: 1024px)" />
    </environment>
</head>
<body>
    <div hidden id="sync-analytics" data-queue="EJ2 - Blazor - Demos"></div>
    <!-- Google Tag Manager (noscript) -->
    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
    <!-- End Google Tag Manager (noscript) -->
    <environment include="Development">
        <script src="_content/@projectPath/scripts/common/index.js" async></script>
    </environment>
    <environment include="Production">
        <script src="_content/@projectPath/scripts/common/index.min.js" async></script>
    </environment>
        <environment include="Production">
        <script src="_content/@projectPath/scripts/image-editor.min.js" async></script>
    </environment>
    <environment include="Development">
        <script src="_content/@projectPath/scripts/image-editor.js" async></script>
    </environment>
    <script src="_content/@projectPath/scripts/common/tooltip.min.js" async></script>
    <div class="dynamic-resources">
        @if(!SampleService.IsHomeLoaded){
            SampleService.SampleJSLoaded = true;
            SampleService.checkSampleType(UrlHelper.Uri);
            <script src="@SampleService.CommonScriptPath/syncfusion-blazor.min.js"></script>
            <script src="@SampleService.SBScriptPath"></script>
            @if((SampleService.ComponentName != null && SampleService.ComponentName.Equals("PDF Viewer")) || SampleService.IsPdfViewerSample){
                <script src="@SampleService.PdfScriptPath/syncfusion-blazor-pdfviewer.min.js"></script>
            }
            @if ((SampleService.ComponentName != null && SampleService.ComponentName.Equals("PDF Viewer (NextGen)")) || SampleService.IsPdfViewerSample)
            {
                <script src="@SampleService.PdfScriptPath2/syncfusion-blazor-sfpdfviewer.min.js"></script>
            }
            @if((SampleService.ComponentName != null && SampleService.ComponentName.Equals("PowerPoint (Presentation)")) || SampleService.IsPdfViewerSample){
                <script src="@SampleService.PdfScriptPath/syncfusion-blazor-pdfviewer.min.js"></script>
            }
            @if((SampleService.ComponentName != null && SampleService.ComponentName.Equals("Word Processor")) || SampleService.IsWordEditorSample){
                <script src="@SampleService.DocScriptPath/syncfusion-blazor-documenteditor.min.js"></script>
            }
        }
    </div>

    <component type="typeof(App)" render-mode="ServerPrerendered" />
    <script src="_framework/blazor.server.js" autostart="false"></script>
        <script>
            Blazor.start({          
                 reconnectionHandler: {
                    onConnectionDown: (options, error) => Blazor.reconnect(),
                    onConnectionUp: () => console.log("Sample Reconnected Again")
                }
            });
        </script>
    
</body>
</html>
