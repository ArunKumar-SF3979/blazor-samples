@page "/scheduler/custom-month-view"

@using Syncfusion.Blazor.Schedule
@inherits SampleBaseComponent;

<SampleDescription>
    <p>
        This demo showcases how to customize the starting week of the month and also customize the number of weeks to be
        rendered in month view.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        In this demo, the starting week of the month view can be customized by using the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Schedule.ScheduleView.html#Syncfusion_Blazor_Schedule_ScheduleView_DisplayDate">DisplayDate</a>
        property and also the number of weeks to be rendered in a month view can be customized by using the
        <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Schedule.ScheduleView.html#Syncfusion_Blazor_Schedule_ScheduleView_NumberOfWeeks">NumberOfWeeks</a> property. These properties have been configured under the <code>ScheduleView</code> property.
        DisplayDate and NumberOfWeeks properties can be applicable only for month view.
    </p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="schedule-wrapper">
        <SfSchedule TValue="AppointmentData" Width="100%" Height="500px">
            <ScheduleEventSettings DataSource="@DataSource"></ScheduleEventSettings>
            <ScheduleViews>
                <ScheduleView MaxEventsPerRow="2" Option="View.Month" DisplayDate="new DateTime(2022, 1, 16)" NumberOfWeeks="3"></ScheduleView>
            </ScheduleViews>
        </SfSchedule>
    </div>
</div>

@code{
    public List<AppointmentData> DataSource = GetScheduleData();
    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public string Description { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public Nullable<bool> IsAllDay { get; set; }
        public string CategoryColor { get; set; }
        public string RecurrenceRule { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
        public string RecurrenceException { get; set; }
        public string StartTimezone { get; set; }
        public string EndTimezone { get; set; }
    }
    static private List<AppointmentData> GetScheduleData()
    {
        DateTime startDate = new DateTime(2021, 12, 19);
        DateTime endDate = new DateTime(2022, 3, 12);
        List<AppointmentData> dataCollections = new List<AppointmentData>(360);
        var names = new string[] {
            "Story Time for Kids", "Camping with Turtles", "Wildlife Warriors", "Parrot Talk", "Birds of Prey", "Croco World",
            "Venomous Snake Hunt", "Face Painting & Drawing events", "Pony Rides", "Feed the Giants", "Jungle Treasure Hunt",
            "Endangered Species Program", "Black Cockatoos Playtime", "Walk with Jungle King", "Trained Climbers", "Playtime with Chimpanzees",
            "Meet a small Mammal", "Amazon Fish Feeding", "Elephant Ride"};
        Random random = new Random();
        int id = 1;
        for (DateTime start = startDate; start < endDate;)
        {
            int count = random.Next(1, 3);
            for (int b = 0; b < count; b++)
            {
                int hour = random.Next(1, 23);
                int minutes = random.Next(0, 60);
                int nCount = random.Next(0, names.Length - 1);
                DateTime eventStart = new DateTime(start.Year, start.Month, start.Day, hour, minutes, 0);
                DateTime eventEnd = eventStart.AddHours(2.5);

                DayOfWeek[] weekEnd = new DayOfWeek[] { DayOfWeek.Saturday, DayOfWeek.Sunday };
                if ((Array.IndexOf(weekEnd, eventStart.DayOfWeek) > -1) || Array.IndexOf(weekEnd, eventEnd.DayOfWeek) > -1)
                {
                    continue;
                }

                dataCollections.Add(new AppointmentData
                {
                    Id = id,
                    Subject = names[nCount],
                    StartTime = eventStart,
                    EndTime = eventEnd,
                    IsAllDay = (id % 10 == 0) ? true : false
                });
                id++;
            }
            start = start.AddDays(1);
        }
        return dataCollections;
    }
}